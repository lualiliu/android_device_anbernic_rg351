diff --git a/api/current.txt b/api/current.txt
index 952ccdad992c..c9b1a23eaef2 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -52920,6 +52920,11 @@ package android.view {
     field public static final int KEYCODE_TV_INPUT_HDMI_3 = 245; // 0xf5
     field public static final int KEYCODE_TV_INPUT_HDMI_4 = 246; // 0xf6
     field public static final int KEYCODE_TV_INPUT_VGA_1 = 251; // 0xfb
+    field public static final int KEYCODE_TV_KEYMOUSE_DOWN = 292; // 0x124
+    field public static final int KEYCODE_TV_KEYMOUSE_LEFT = 289; // 0x121
+    field public static final int KEYCODE_TV_KEYMOUSE_MODE_SWITCH = 293; // 0x125
+    field public static final int KEYCODE_TV_KEYMOUSE_RIGHT = 290; // 0x122
+    field public static final int KEYCODE_TV_KEYMOUSE_UP = 291; // 0x123
     field public static final int KEYCODE_TV_MEDIA_CONTEXT_MENU = 257; // 0x101
     field public static final int KEYCODE_TV_NETWORK = 241; // 0xf1
     field public static final int KEYCODE_TV_NUMBER_ENTRY = 234; // 0xea
diff --git a/api/test-current.txt b/api/test-current.txt
index cf97b848e80b..53025f635a06 100644
--- a/api/test-current.txt
+++ b/api/test-current.txt
@@ -5126,7 +5126,7 @@ package android.view {
   public class KeyEvent extends android.view.InputEvent implements android.os.Parcelable {
     method public static String actionToString(int);
     method public final void setDisplayId(int);
-    field public static final int LAST_KEYCODE = 288; // 0x120
+    field public static final int LAST_KEYCODE = 293; // 0x125
   }
 
   public final class KeyboardShortcutGroup implements android.os.Parcelable {
diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index c976a9bfb30d..7e8b370011bf 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -36,6 +36,20 @@ import android.annotation.StyleRes;
 import android.annotation.SystemApi;
 import android.annotation.TestApi;
 import android.app.VoiceInteractor.Request;
+import android.os.PersistableBundle;
+import android.transition.Scene;
+import android.transition.TransitionManager;
+import android.util.ArrayMap;
+import android.util.SuperNotCalledException;
+import android.widget.Toolbar;
+import android.widget.Toast;
+
+import com.android.internal.app.IVoiceInteractor;
+import com.android.internal.app.WindowDecorActionBar;
+import com.android.internal.app.ToolbarActionBar;
+
+import android.annotation.SystemApi;
+import android.os.SystemProperties;
 import android.app.admin.DevicePolicyManager;
 import android.app.assist.AssistContent;
 import android.compat.annotation.UnsupportedAppUsage;
@@ -3683,6 +3697,16 @@ public class Activity extends ContextThemeWrapper
      * @see android.view.KeyEvent
      */
     public boolean onKeyDown(int keyCode, KeyEvent event)  {
+            String mstate=null;
+            mstate = SystemProperties.get("sys.KeyMouse.mKeyMouseState");
+
+            if ((keyCode == KeyEvent.KEYCODE_TV_KEYMOUSE_MODE_SWITCH)) {
+                if ("on".equals(mstate)) {
+                    Toast.makeText(Activity.this, "Mouse mode enabled, click again to exit.", Toast.LENGTH_LONG).show();
+                } else if ("off".equals(mstate)) {
+                    Toast.makeText(Activity.this, "Mouse mode disabled, default button mode.", Toast.LENGTH_LONG).show();
+                }
+            }
         if (keyCode == KeyEvent.KEYCODE_BACK) {
             if (getApplicationInfo().targetSdkVersion
                     >= Build.VERSION_CODES.ECLAIR) {
diff --git a/core/java/android/net/ConnectivityManager.java b/core/java/android/net/ConnectivityManager.java
index ed03f5198d6f..659262070df9 100644
--- a/core/java/android/net/ConnectivityManager.java
+++ b/core/java/android/net/ConnectivityManager.java
@@ -3115,7 +3115,7 @@ public class ConnectivityManager {
     }
 
     /**
-     * Set sign in error notification to visible or invisible
+     * Set sign in error notification to visible or in visible
      *
      * @hide
      * @deprecated Doesn't properly deal with multiple connected networks of the same type.
diff --git a/core/java/android/os/Build.java b/core/java/android/os/Build.java
index 8c6fca50fa8b..83c8416018af 100755
--- a/core/java/android/os/Build.java
+++ b/core/java/android/os/Build.java
@@ -1113,7 +1113,7 @@ public class Build {
         // Don't care on eng builds.  Incremental build may trigger false negative.
         if (IS_ENG) return true;
 
-        if (IS_TREBLE_ENABLED) {
+      /*  if (IS_TREBLE_ENABLED) {
             // If we can run this code, the device should already pass AVB.
             // So, we don't need to check AVB here.
             int result = VintfObject.verifyWithoutAvb();
@@ -1124,7 +1124,7 @@ public class Build {
             }
 
             return result == 0;
-        }
+        }*/
 
         final String system = SystemProperties.get("ro.system.build.fingerprint");
         final String vendor = SystemProperties.get("ro.vendor.build.fingerprint");
diff --git a/core/java/android/view/IWindowManager.aidl b/core/java/android/view/IWindowManager.aidl
index f30c87fafa04..b9952f181fd2 100644
--- a/core/java/android/view/IWindowManager.aidl
+++ b/core/java/android/view/IWindowManager.aidl
@@ -113,6 +113,10 @@ interface IWindowManager
     void clearForcedDisplayDensityForUser(int displayId, int userId);
     void setForcedDisplayScalingMode(int displayId, int mode); // 0 = auto, 1 = disable
 
+    //interfaces for mouse keyevent input
+    void dispatchMouse(float x, float y, int w, int h);
+    void dispatchMouseByCd(float x, float y);
+
     // These can only be called when holding the MANAGE_APP_TOKENS permission.
     void setEventDispatching(boolean enabled);
 
diff --git a/core/java/android/view/KeyEvent.java b/core/java/android/view/KeyEvent.java
index 7976576a50f5..5206195ebed3 100644
--- a/core/java/android/view/KeyEvent.java
+++ b/core/java/android/view/KeyEvent.java
@@ -825,12 +825,22 @@ public class KeyEvent extends InputEvent implements Parcelable {
      */
     public static final int KEYCODE_PROFILE_SWITCH = 288;
 
+    /** Key code constant: Tv controller left mouse key */
+    public static final int KEYCODE_TV_KEYMOUSE_LEFT = 289;
+    /** Key code constant: Tv controller right mouse key*/
+    public static final int KEYCODE_TV_KEYMOUSE_RIGHT = 290;
+    /** Key code constant: Tv controller up mouse key*/
+    public static final int KEYCODE_TV_KEYMOUSE_UP = 291;
+    /** Key code constant: Tv controller down mouse key*/
+    public static final int KEYCODE_TV_KEYMOUSE_DOWN = 292;
+    /** Key code constant: Tv controller switch mouse key*/
+    public static final int KEYCODE_TV_KEYMOUSE_MODE_SWITCH = 293;
     /**
      * Integer value of the last KEYCODE. Increases as new keycodes are added to KeyEvent.
      * @hide
      */
     @TestApi
-    public static final int LAST_KEYCODE = KEYCODE_PROFILE_SWITCH;
+    public static final int LAST_KEYCODE = KEYCODE_TV_KEYMOUSE_MODE_SWITCH;
 
     // NOTE: If you add a new keycode here you must also add it to:
     //  isSystem()
diff --git a/core/java/android/view/ViewGroup.java b/core/java/android/view/ViewGroup.java
index 77fedd7c30d4..95c6d0149f63 100644
--- a/core/java/android/view/ViewGroup.java
+++ b/core/java/android/view/ViewGroup.java
@@ -1956,7 +1956,7 @@ public abstract class ViewGroup extends View implements ViewParent, ViewManager
             }
         } else if (mFocused != null && (mFocused.mPrivateFlags & PFLAG_HAS_BOUNDS)
                 == PFLAG_HAS_BOUNDS) {
-            if (mFocused.dispatchKeyEvent(event)) {
+            if (mFocused.dispatchKeyEvent(event) && KeyEvent.KEYCODE_BUTTON_R1 != event.getKeyCode()) {
                 return true;
             }
         }
diff --git a/core/res/res/values/attrs.xml b/core/res/res/values/attrs.xml
index 2f1bcdc76afb..d7bb6dc53870 100644
--- a/core/res/res/values/attrs.xml
+++ b/core/res/res/values/attrs.xml
@@ -1931,6 +1931,11 @@
         <enum name="KEYCODE_THUMBS_UP" value="286" />
         <enum name="KEYCODE_THUMBS_DOWN" value="287" />
         <enum name="KEYCODE_PROFILE_SWITCH" value="288" />
+        <enum name="KEYCODE_TV_KEYMOUSE_LEFT" value="289" />
+        <enum name="KEYCODE_TV_KEYMOUSE_RIGHT" value="290" />
+        <enum name="KEYCODE_TV_KEYMOUSE_UP" value="291" />
+        <enum name="KEYCODE_TV_KEYMOUSE_DOWN" value="292" />
+        <enum name="KEYCODE_TV_KEYMOUSE_SWITCH" value="293" />
     </attr>
 
     <!-- ***************************************************************** -->
diff --git a/data/keyboards/Generic.kl b/data/keyboards/Generic.kl
index 51500439d3cf..00a3c0a79022 100644
--- a/data/keyboards/Generic.kl
+++ b/data/keyboards/Generic.kl
@@ -144,7 +144,7 @@ key 121   NUMPAD_COMMA
 key 122   KANA
 key 123   EISU
 key 124   YEN
-key 125   META_LEFT
+key 125   TV_KEYMOUSE_MODE_SWITCH
 key 126   META_RIGHT
 key 127   MENU
 key 128   MEDIA_STOP
diff --git a/non-updatable-api/current.txt b/non-updatable-api/current.txt
index 5f15216e8400..1f8ccf3f71c5 100644
--- a/non-updatable-api/current.txt
+++ b/non-updatable-api/current.txt
@@ -51081,6 +51081,11 @@ package android.view {
     field public static final int KEYCODE_TV_INPUT_HDMI_3 = 245; // 0xf5
     field public static final int KEYCODE_TV_INPUT_HDMI_4 = 246; // 0xf6
     field public static final int KEYCODE_TV_INPUT_VGA_1 = 251; // 0xfb
+    field public static final int KEYCODE_TV_KEYMOUSE_DOWN = 292; // 0x124
+    field public static final int KEYCODE_TV_KEYMOUSE_LEFT = 289; // 0x121
+    field public static final int KEYCODE_TV_KEYMOUSE_MODE_SWITCH = 293; // 0x125
+    field public static final int KEYCODE_TV_KEYMOUSE_RIGHT = 290; // 0x122
+    field public static final int KEYCODE_TV_KEYMOUSE_UP = 291; // 0x123
     field public static final int KEYCODE_TV_MEDIA_CONTEXT_MENU = 257; // 0x101
     field public static final int KEYCODE_TV_NETWORK = 241; // 0xf1
     field public static final int KEYCODE_TV_NUMBER_ENTRY = 234; // 0xea
diff --git a/services/core/java/com/android/server/input/InputManagerService.java b/services/core/java/com/android/server/input/InputManagerService.java
index 91f169a6732a..c1298e5522a3 100644
--- a/services/core/java/com/android/server/input/InputManagerService.java
+++ b/services/core/java/com/android/server/input/InputManagerService.java
@@ -253,6 +253,8 @@ public class InputManagerService extends IInputManager.Stub
     private static native boolean nativeCanDispatchToDisplay(long ptr, int deviceId, int displayId);
     private static native void nativeNotifyPortAssociationsChanged(long ptr);
     private static native void nativeSetMotionClassifierEnabled(long ptr, boolean enabled);
+    private static native void nativedispatchMouse(float x, float y, int w, int h, long ptr);
+    private static native void nativedispatchMouseByCd(float x, float y, long ptr);
 
     // Input event injection constants defined in InputDispatcher.h.
     private static final int INPUT_EVENT_INJECTION_SUCCEEDED = 0;
@@ -439,6 +441,14 @@ public class InputManagerService extends IInputManager.Stub
         nativeSetDisplayViewports(mPtr, viewports.toArray(new DisplayViewport[0]));
     }
 
+    public void dispatchMouse(float x, float y, int w, int h) {
+        nativedispatchMouse(x, y, w, h, mPtr);
+    }
+
+    public void dispatchMousebyCd(float x, float y) {
+        nativedispatchMouseByCd(x, y, mPtr);
+    }
+
     /**
      * Gets the current state of a key or button by key code.
      * @param deviceId The input device id, or -1 to consult all devices.
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 2e58c98da57e..0ae5aa768a39 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -704,6 +704,51 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private static final int MSG_POWER_VERY_LONG_PRESS = 25;
     private static final int MSG_RINGER_TOGGLE_CHORD = 26;
 
+    private int screenWidth;
+    private int screenHeight;
+    private String mstate = null;
+    private float mdeltax, mdeltay;
+    boolean keydown;
+
+    public Handler mKeyMouseHandler = new Handler() {
+        public void handleMessage(Message msg) {
+            switch(msg.what){
+            case KeyEvent.KEYCODE_TV_KEYMOUSE_LEFT:
+                mdeltax = -1.0f;
+                mdeltay = 0;
+                break;
+            case KeyEvent.KEYCODE_TV_KEYMOUSE_RIGHT:
+                mdeltax = 1.0f;
+                mdeltay = 0;
+                break;
+            case KeyEvent.KEYCODE_TV_KEYMOUSE_UP:
+                mdeltax = 0;
+                mdeltay = -1.0f;
+                break;
+            case KeyEvent.KEYCODE_TV_KEYMOUSE_DOWN:
+                mdeltax = 0;
+                mdeltay = 1.0f;
+                break;
+            case KeyEvent.KEYCODE_TV_KEYMOUSE_MODE_SWITCH:
+                mdeltax = 0;
+                mdeltay = 0;
+                break;
+            default:
+                break;
+            }
+
+            try {
+                mWindowManager.dispatchMouse(mdeltax,mdeltay,screenWidth,screenHeight);
+            } catch (Exception e){
+                e.printStackTrace();
+            }
+
+            if (keydown) {
+                mKeyMouseHandler.sendEmptyMessageDelayed(msg.what,30);
+            }
+        }
+    };
+
     // Lineage additions
     private static final int MSG_TOGGLE_TORCH = 100;
     private static final int MSG_CAMERA_LONG_PRESS = 101;
@@ -3013,6 +3058,21 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     + repeatCount + " keyguardOn=" + keyguardOn + " canceled=" + canceled);
         }
 
+        //infrare simulate mouse
+           mstate = SystemProperties.get("sys.KeyMouse.mKeyMouseState");
+        if (mstate.equals("on") && ((keyCode == KeyEvent.KEYCODE_TV_KEYMOUSE_LEFT)
+                || (keyCode == KeyEvent.KEYCODE_TV_KEYMOUSE_RIGHT)
+                || (keyCode == KeyEvent.KEYCODE_TV_KEYMOUSE_UP)
+                || (keyCode == KeyEvent.KEYCODE_TV_KEYMOUSE_DOWN)
+                || (keyCode == KeyEvent.KEYCODE_TV_KEYMOUSE_MODE_SWITCH))) {
+            keydown = down;
+            mKeyMouseHandler.sendEmptyMessage(keyCode);
+           }
+
+           if (mstate.equals("on") && (keyCode == KeyEvent.KEYCODE_BUTTON_R1)) {
+            return -1;
+           }
+
         // If we think we might have a volume down & power key chord on the way
         // but we're not sure, then tell the dispatcher to wait a little while and
         // try again later before dispatching.
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
index 355a531496f3..59c50120181c 100644
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -350,6 +350,16 @@ public class WindowManagerService extends IWindowManager.Stub
      */
     static final int MAX_ANIMATION_DURATION = 10 * 1000;
 
+    /** The time for mouse input injection
+     *
+     */
+    static final int INJECTION_TIMEOUT_MILLIS = 30 * 1000;
+
+    /** Amount of time (in milliseconds) to animate the fade-in-out transition for
+     * compatible windows.
+     */
+    static final int DEFAULT_FADE_IN_OUT_DURATION = 400;
+
     /** Amount of time (in milliseconds) to delay before declaring a window freeze timeout. */
     static final int WINDOW_FREEZE_TIMEOUT_DURATION = 2000;
 
@@ -4562,6 +4572,54 @@ public class WindowManagerService extends IWindowManager.Stub
     final InputManagerCallback mInputManagerCallback = new InputManagerCallback(this);
     private boolean mEventDispatchingEnabled;
 
+    public void dispatchMouse(float x, float y, int w, int h) {
+            mInputManager.dispatchMouse(x,y,w,h);
+    }
+
+    public void dispatchMouseByCd(float x, float y) {
+            mInputManager.dispatchMousebyCd(x,y);
+    }
+
+    public boolean injectKeyEvent(KeyEvent ev, boolean sync) {
+            int action = ev.getAction();
+            int code = ev.getKeyCode();
+            int repeatCount = ev.getRepeatCount();
+            int metaState = ev.getMetaState();
+            int deviceId = ev.getDeviceId();
+            int scancode = ev.getScanCode();
+            int source = ev.getSource();
+            int flags = ev.getFlags();
+            long downTime = ev.getDownTime();
+            long eventTime = ev.getEventTime();
+
+            if (source == InputDevice.SOURCE_UNKNOWN) {
+                source = InputDevice.SOURCE_KEYBOARD;
+            }
+
+            if (eventTime == 0) {
+                eventTime = SystemClock.uptimeMillis();
+            }
+
+            if (downTime == 0) {
+                downTime = eventTime;
+            }
+
+            KeyEvent newEvent = new KeyEvent(downTime, eventTime, action, code, repeatCount, metaState,
+                       deviceId, scancode, flags | KeyEvent.FLAG_FROM_SYSTEM, source);
+
+            final boolean result = mInputManager.injectInputEvent(newEvent,sync ? 2:1);
+            return result;
+    }
+
+    public boolean injectPointerEvent(MotionEvent ev, boolean sync) {
+            MotionEvent newEvent = MotionEvent.obtain(ev);
+            if ((newEvent.getSource() & InputDevice.SOURCE_CLASS_POINTER) == 0) {
+                    newEvent.setSource(InputDevice.SOURCE_TOUCHSCREEN);
+            }
+            final boolean result = mInputManager.injectInputEvent(newEvent,sync ? 2:1);
+            return result;
+    }
+
     @Override
     public void setEventDispatching(boolean enabled) {
         if (!checkCallingPermission(MANAGE_APP_TOKENS, "setEventDispatching()")) {
diff --git a/services/core/jni/com_android_server_input_InputManagerService.cpp b/services/core/jni/com_android_server_input_InputManagerService.cpp
index 396d67af9baa..f8a97650a8e2 100644
--- a/services/core/jni/com_android_server_input_InputManagerService.cpp
+++ b/services/core/jni/com_android_server_input_InputManagerService.cpp
@@ -41,6 +41,7 @@
 #include <utils/Trace.h>
 
 #include <binder/IServiceManager.h>
+#include <cutils/properties.h>
 
 #include <input/PointerController.h>
 #include <input/SpriteController.h>
@@ -62,6 +63,13 @@
 #include <nativehelper/ScopedPrimitiveArray.h>
 #include <nativehelper/ScopedUtfChars.h>
 
+#include <stddef.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <errno.h>
+#include <limits.h>
+#include <math.h>
+
 #include "com_android_server_power_PowerManagerService.h"
 #include "android_hardware_input_InputApplicationHandle.h"
 #include "android_hardware_input_InputWindowHandle.h"
@@ -81,6 +89,7 @@ namespace android {
 // The scaling factor is calculated as 2 ^ (speed * exponent),
 // where the speed ranges from -7 to + 7 and is supplied by the user.
 static const float POINTER_SPEED_EXPONENT = 1.0f / 4;
+static sp<PointerControllerInterface> mPointerController;
 
 static struct {
     jclass clazz;
@@ -1778,6 +1787,62 @@ static void nativeSetMotionClassifierEnabled(JNIEnv* /* env */, jclass /* clazz
     im->setMotionClassifierEnabled(enabled);
 }
 
+static void android_server_InputManager_nativedispatchMouse(JNIEnv* env,
+              jclass clazz,jfloat x,jfloat y,jint w,jint h,jlong ptr) {
+    NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
+
+    int mID;
+    float mx, my;
+    float screenWidth,screenHeight;
+    char *mgetID=new char[PROPERTY_VALUE_MAX];
+    const char *mkeyMouseState;
+    screenWidth=(float)w;
+    screenHeight=(float)h;
+
+    property_get("sys.ID.mID",mgetID,0);
+    mID=atoi(mgetID);
+
+    mPointerController=im->obtainPointerController(mID);
+
+    //start to dispatchMouse
+    mPointerController->setPresentation(PointerControllerInterface::PRESENTATION_POINTER);
+    mPointerController->move(x,y);
+    mPointerController->unfade(PointerControllerInterface::TRANSITION_IMMEDIATE);
+    mPointerController->getPosition(&mx, &my);
+
+    if (mx == 0) {
+           mkeyMouseState="left";
+    } else if (mx>=(screenWidth-5.0f)) {
+           mkeyMouseState="right";
+    } else if (my == 0) {
+           mkeyMouseState="up";
+    } else if (my >= (screenHeight-5.0f)) {
+           mkeyMouseState="down";
+    } else {
+           mkeyMouseState="Non-boundary";
+    }
+
+    property_set("sys.keymouselimitstate",mkeyMouseState);
+}
+
+static void android_server_InputManager_nativedispatchMouseByCd(JNIEnv* env,
+jclass clazz,jfloat x,jfloat y,jlong ptr) {
+   NativeInputManager* im = reinterpret_cast<NativeInputManager*>(ptr);
+   int mID;
+   char *mgetID=new char[PROPERTY_VALUE_MAX];
+
+   property_get("sys.ID.mID",mgetID,0);
+   mID=atoi(mgetID);
+
+   mPointerController=im->obtainPointerController(mID);
+
+   //start to dispatchMouse
+    mPointerController->setPresentation(PointerControllerInterface::PRESENTATION_POINTER);
+    mPointerController->setPosition(x,y);
+    mPointerController->unfade(PointerControllerInterface::TRANSITION_IMMEDIATE);
+   //mPointerController->fade(PointerControllerInterface::TRANSITION_IMMEDIATE);
+}
+
 // ----------------------------------------------------------------------------
 
 static const JNINativeMethod gInputManagerMethods[] = {
@@ -1837,6 +1902,8 @@ static const JNINativeMethod gInputManagerMethods[] = {
         {"nativeCanDispatchToDisplay", "(JII)Z", (void*)nativeCanDispatchToDisplay},
         {"nativeNotifyPortAssociationsChanged", "(J)V", (void*)nativeNotifyPortAssociationsChanged},
         {"nativeSetMotionClassifierEnabled", "(JZ)V", (void*)nativeSetMotionClassifierEnabled},
+        { "nativedispatchMouse", "(FFIIJ)V", (void*) android_server_InputManager_nativedispatchMouse },
+        { "nativedispatchMouseByCd", "(FFJ)V", (void*) android_server_InputManager_nativedispatchMouseByCd },
 };
 
 #define FIND_CLASS(var, className) \

