diff --git a/data/etc/handheld_core_hardware.xml b/data/etc/handheld_core_hardware.xml
index dc6963fef..ab2da7c0a 100644
--- a/data/etc/handheld_core_hardware.xml
+++ b/data/etc/handheld_core_hardware.xml
@@ -37,7 +37,7 @@
     <feature name="android.hardware.microphone" />
     <feature name="android.hardware.screen.portrait" />
     <feature name="android.hardware.screen.landscape" />
-
+    
     <!-- basic system services -->
     <feature name="android.software.app_widgets" />
     <feature name="android.software.connectionservice" />
diff --git a/include/android/keycodes.h b/include/android/keycodes.h
index 214559d68..9ed591da2 100644
--- a/include/android/keycodes.h
+++ b/include/android/keycodes.h
@@ -776,7 +776,12 @@ enum {
     AKEYCODE_THUMBS_DOWN = 287,
     /** Used to switch current account that is consuming content.
      * May be consumed by system to switch current viewer profile. */
-    AKEYCODE_PROFILE_SWITCH = 288
+    AKEYCODE_PROFILE_SWITCH = 288,
+    AKEYCODE_TV_KEYMOUSE_LEFT = 289,
+    AKEYCODE_TV_KEYMOUSE_RIGHT = 290,
+    AKEYCODE_TV_KEYMOUSE_UP = 291,
+    AKEYCODE_TV_KEYMOUSE_DOWN = 292,
+    AKEYCODE_TV_KEYMOUSE_MODE_SWITCH = 293
 
     // NOTE: If you add a new keycode here you must also add it to several other files.
     //       Refer to frameworks/base/core/java/android/view/KeyEvent.java for the full list.
diff --git a/include/input/InputEventLabels.h b/include/input/InputEventLabels.h
index b327d76b1..2c89e9ed5 100644
--- a/include/input/InputEventLabels.h
+++ b/include/input/InputEventLabels.h
@@ -328,7 +328,11 @@ static const InputEventLabel KEYCODES[] = {
     DEFINE_KEYCODE(THUMBS_UP),
     DEFINE_KEYCODE(THUMBS_DOWN),
     DEFINE_KEYCODE(PROFILE_SWITCH),
-
+    DEFINE_KEYCODE(TV_KEYMOUSE_LEFT),
+    DEFINE_KEYCODE(TV_KEYMOUSE_RIGHT),
+    DEFINE_KEYCODE(TV_KEYMOUSE_UP),
+    DEFINE_KEYCODE(TV_KEYMOUSE_DOWN),
+    DEFINE_KEYCODE(TV_KEYMOUSE_MODE_SWITCH),
     { nullptr, 0 }
 };
 
diff --git a/libs/binder/Parcel.cpp b/libs/binder/Parcel.cpp
index 64a4f9bf6..88845ec4c 100644
--- a/libs/binder/Parcel.cpp
+++ b/libs/binder/Parcel.cpp
@@ -1883,8 +1883,8 @@ const char* Parcel::readString8Inplace(size_t* outLen) const
         const char* str = (const char*)readInplace(size+1);
         if (str != nullptr) {
             if (str[size] == '\0') {
-                return str;
-            }
+            return str;
+        }
             android_errorWriteLog(0x534e4554, "172655291");
         }
     }
@@ -1946,7 +1946,7 @@ const char16_t* Parcel::readString16Inplace(size_t* outLen) const
         const char16_t* str = (const char16_t*)readInplace((size+1)*sizeof(char16_t));
         if (str != nullptr) {
             if (str[size] == u'\0') {
-                return str;
+            return str;
             }
             android_errorWriteLog(0x534e4554, "172655291");
         }
diff --git a/libs/gui/Android.bp b/libs/gui/Android.bp
index f14cd7a8a..2cf589d51 100644
--- a/libs/gui/Android.bp
+++ b/libs/gui/Android.bp
@@ -119,7 +119,11 @@ cc_defaults {
 
     aidl: {
         export_aidl_headers: true,
-    }
+    },
+
+    lto: {
+        thin: true,
+    },
 }
 
 // Used by media codec services exclusively as a static lib for
diff --git a/libs/renderengine/gl/GLESRenderEngine.cpp b/libs/renderengine/gl/GLESRenderEngine.cpp
index 0285c2f6f..f25d26d40 100644
--- a/libs/renderengine/gl/GLESRenderEngine.cpp
+++ b/libs/renderengine/gl/GLESRenderEngine.cpp
@@ -51,6 +51,15 @@
 #include "ProgramCache.h"
 #include "filters/BlurFilter.h"
 
+#if RK_NV12_10_TO_NV12_BY_RGA
+#define UN_NEED_GL
+#include <include/RockchipRga.h>
+#endif
+
+#if (RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+#include <dlfcn.h>
+#endif
+
 extern "C" EGLAPI const char* eglQueryStringImplementationANDROID(EGLDisplay dpy, EGLint name);
 
 bool checkGlError(const char* op, int lineNumber) {
@@ -113,6 +122,19 @@ void writePPM(const char* basename, GLuint width, GLuint height) {
 }
 
 namespace android {
+
+#if (RK_NV12_10_TO_NV12_BY_RGA | RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+    typedef struct
+    {
+         sp<GraphicBuffer> yuvTexBuffer;
+         EGLImageKHR img;
+    } TexBufferImag;
+
+#define TexBufferMax  2
+#define TexKey 0x524f434b
+    static TexBufferImag yuvTeximg[TexBufferMax] = {{NULL,EGL_NO_IMAGE_KHR},{NULL,EGL_NO_IMAGE_KHR}};
+#endif
+
 namespace renderengine {
 namespace gl {
 
@@ -1026,6 +1048,103 @@ EGLImageKHR GLESRenderEngine::createFramebufferImageIfNeeded(ANativeWindowBuffer
     return image;
 }
 
+#if (RK_NV12_10_TO_NV12_BY_RGA | RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+  /* print time macros. */
+#define PRINT_TIME_START        \
+    struct timeval tpend1, tpend2;\
+    long usec1 = 0;\
+    gettimeofday(&tpend1,NULL);\
+
+#define PRINT_TIME_END(tag)        \
+    gettimeofday(&tpend2,NULL);\
+    usec1 = 1000*(tpend2.tv_sec - tpend1.tv_sec) + (tpend2.tv_usec- tpend1.tv_usec)/1000;\
+    if (property_get_bool("sys.hwc.time", 1)) \
+    ALOGD_IF(1,"%s use time=%ld ms",tag,usec1);\
+
+#if RK_NV12_10_TO_NV12_BY_RGA
+static int rgaCopyBit(sp<GraphicBuffer> src_buf, sp<GraphicBuffer> dst_buf, const Rect& rect)
+{
+    rga_info_t src, dst;
+    int src_l,src_t,src_r,src_b,src_h,src_stride,src_format;
+    int dst_l,dst_t,dst_r,dst_b,dst_h,dst_stride,dst_format;
+    RockchipRga& mRga = RockchipRga::get();
+    int ret = 0;
+
+    memset(&src, 0, sizeof(rga_info_t));
+    memset(&dst, 0, sizeof(rga_info_t));
+    src.fd = -1;
+    dst.fd = -1;
+
+    src_stride = src_buf->getStride();
+    src_format = src_buf->getPixelFormat();
+    src_h = src_buf->getHeight();
+
+    dst_stride = dst_buf->getStride();
+    dst_format = dst_buf->getPixelFormat();
+    dst_h = dst_buf->getHeight();
+
+    dst_l = src_l = rect.left;
+    dst_t = src_t = rect.top;
+    dst_r = src_r = rect.right;
+    dst_b = src_b = rect.bottom;
+    rga_set_rect(&src.rect, src_l, src_t, src_r - src_l, src_b - src_t, src_stride, src_h, src_format);
+    rga_set_rect(&dst.rect, dst_l, dst_t, dst_buf->getWidth(), dst_buf->getHeight(), dst_stride, dst_h, dst_format);
+
+    src.hnd = src_buf->handle;
+    dst.hnd = dst_buf->handle;
+//    mRga.RkRgaGetBufferFd(src_buf->handle, &src.fd);
+//    mRga.RkRgaGetBufferFd(dst_buf->handle, &dst.fd);
+//  src.rotation = rga_transform;
+//PRINT_TIME_START
+
+    ret = mRga.RkRgaBlit(&src, &dst, NULL);
+//PRINT_TIME_END("rgaCopyBit")
+    if(ret) {
+        ALOGD_IF(1,"rgaCopyBit  : src[x=%d,y=%d,w=%d,h=%d,ws=%d,hs=%d,format=0x%x],dst[x=%d,y=%d,w=%d,h=%d,ws=%d,hs=%d,format=0x%x]",
+            src.rect.xoffset, src.rect.yoffset, src.rect.width, src.rect.height, src.rect.wstride, src.rect.hstride, src.rect.format,
+            dst.rect.xoffset, dst.rect.yoffset, dst.rect.width, dst.rect.height, dst.rect.wstride, dst.rect.hstride, dst.rect.format);
+        ALOGD_IF(1,"rgaCopyBit : src hnd=%p,dst hnd=%p, src_format=0x%x ==> dst_format=0x%x\n",
+            (void*)src_buf->handle, (void*)(dst_buf->handle), src_format, dst_format);
+        return ret;
+    }
+
+    return ret;
+}
+#endif
+
+#if RK_HDR
+typedef unsigned char u8;
+typedef unsigned short u16;
+typedef unsigned int u32;
+typedef signed char s8;
+typedef signed short s16;
+typedef signed int s32;
+#define ARM_P010            0x4000000
+#define HDRUSAGE            0x3000000
+#define RK_XXX_PATH         "/system/lib64/librockchipxxx.so"
+typedef void (*__rockchipxxx)(u8 *src, u8 *dst, int w, int h, int srcStride, int dstStride, int area);
+
+static void* dso = NULL;
+static __rockchipxxx rockchipxxx = NULL;
+
+#define ALIGN(val, align) (((val) + ((align) - 1)) & ~((align) - 1))
+
+#elif RK_NV12_10_TO_NV12_BY_NENO
+
+typedef unsigned char u8;
+typedef unsigned short u16;
+typedef unsigned int u32;
+typedef signed char s8;
+typedef signed short s16;
+typedef signed int s32;
+#define RK_XXX_PATH         "/system/lib/librockchipxxx.so"
+typedef void (*__rockchipxxx3288)(u8 *src, u8 *dst, int w, int h, int srcStride, int dstStride, int area);
+
+static void* dso = NULL;
+static __rockchipxxx3288 rockchipxxx3288 = NULL;
+#endif
+
+#endif
 status_t GLESRenderEngine::drawLayers(const DisplaySettings& display,
                                       const std::vector<const LayerSettings*>& layers,
                                       ANativeWindowBuffer* const buffer,
@@ -1170,12 +1289,147 @@ status_t GLESRenderEngine::drawLayers(const DisplaySettings& display,
             isOpaque = layer->source.buffer.isOpaque;
 
             sp<GraphicBuffer> gBuf = layer->source.buffer.buffer;
-            bindExternalTextureBuffer(layer->source.buffer.textureName, gBuf,
-                                      layer->source.buffer.fence);
+#if (RK_NV12_10_TO_NV12_BY_RGA | RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+            if(gBuf != NULL &&
+               gBuf->getPixelFormat() == HAL_PIXEL_FORMAT_YCrCb_NV12_10 )
+            {
+                //Rect CurrentCrop(0,0,3840,2160);
+                Rect CurrentCrop(layer->source.buffer.currentcrop);
+#if RK_HDR
+                const int yuvTexUsage = GraphicBuffer::USAGE_HW_TEXTURE | GRALLOC_USAGE_TO_USE_ARM_P010;
+                const int yuvTexFormat = HAL_PIXEL_FORMAT_YCrCb_NV12_10;
+#elif (RK_NV12_10_TO_NV12_BY_NENO | RK_NV12_10_TO_NV12_BY_RGA)
+                const int yuvTexUsage = GraphicBuffer::USAGE_HW_TEXTURE /*| HDRUSAGE*/;
+                //GraphicBuffer::USAGE_SW_WRITE_RARELY;
+                const int yuvTexFormat = HAL_PIXEL_FORMAT_YCrCb_NV12;
+#endif
+                static int yuvcnt;
+                int yuvIndex ;
+
+                yuvcnt ++;
+                yuvIndex = yuvcnt%2;
+#if (RK_HDR | RK_NV12_10_TO_NV12_BY_NENO)
+                int src_l,src_t,src_r,src_b,src_stride;
+                void *src_vaddr;
+                void *dst_vaddr;
+                src_l = CurrentCrop.left;
+                src_t = CurrentCrop.top;
+                src_r = CurrentCrop.right;
+                src_b = CurrentCrop.bottom;
+                src_stride = gBuf->getStride();
+                uint32_t w = src_r - src_l;
+#elif RK_NV12_10_TO_NV12_BY_RGA
+                //Since rga cann't support scalet to bigger than 4096 limit to 4096
+                uint32_t w = (CurrentCrop.getWidth() + 31) & (~31);
+                //ALOGD("rga10to8[%s %d] f:%x w:%d gH:%d\n",__FUNCTION__,__LINE__,gBuf->getPixelFormat(),w,gBuf->getHeight());
+#endif
+                if((yuvTeximg[yuvIndex].yuvTexBuffer != NULL) &&
+                   (yuvTeximg[yuvIndex].yuvTexBuffer->getWidth() != w ||
+                    yuvTeximg[yuvIndex].yuvTexBuffer->getHeight() != gBuf->getHeight()))
+                {
+                    yuvTeximg[yuvIndex].yuvTexBuffer = NULL;
+                }
+                if(yuvTeximg[yuvIndex].yuvTexBuffer == NULL)
+                {
+                    yuvTeximg[yuvIndex].yuvTexBuffer = new GraphicBuffer(w, gBuf->getHeight(),yuvTexFormat, yuvTexUsage);
+                }
+
+#if (RK_HDR | RK_NV12_10_TO_NV12_BY_NENO)
+                gBuf->lock(GRALLOC_USAGE_SW_READ_OFTEN,&src_vaddr);
+                yuvTeximg[yuvIndex].yuvTexBuffer->lock(GRALLOC_USAGE_SW_WRITE_OFTEN,&dst_vaddr);
+
+                //PRINT_TIME_START
+                if(dso == NULL)
+                    dso = dlopen(RK_XXX_PATH, RTLD_NOW | RTLD_LOCAL);
+
+                if (dso == 0) {
+                    ALOGE("rk_debug can't not find %s ! error=%s \n",RK_XXX_PATH,dlerror());
+                    return BAD_VALUE;
+                }
+#if RK_HDR
+                if(rockchipxxx == NULL)
+                    rockchipxxx = (__rockchipxxx)dlsym(dso, "_Z11rockchipxxxPhS_iiiii");
+                if(rockchipxxx == NULL)
+                {
+                    ALOGE("rk_debug can't not find target function in %s ! \n",RK_XXX_PATH);
+                    dlclose(dso);
+                    return BAD_VALUE;
+                }
+                /* align w to 64 */
+                w = ALIGN(w, 64);
+                ALOGD("DEBUG_lb Stride=%d",yuvTeximg[yuvIndex].yuvTexBuffer->getStride());
+                if(w <= yuvTeximg[yuvIndex].yuvTexBuffer->getStride()/2)
+                {
+                    rockchipxxx((u8*)src_vaddr, (u8*)dst_vaddr, w, yuvTeximg[yuvIndex].yuvTexBuffer->getHeight(), src_stride, yuvTeximg[yuvIndex].yuvTexBuffer->getStride(), 0);
+                }else
+                    ALOGE("%s(%d):unsupport resolution for 4k", __FUNCTION__, __LINE__);
+#elif RK_NV12_10_TO_NV12_BY_NENO
+                if(rockchipxxx3288 == NULL)
+                    rockchipxxx3288 = (__rockchipxxx3288)dlsym(dso, "_Z15rockchipxxx3288PhS_iiiii");
+                if(rockchipxxx3288 == NULL)
+                {
+                    ALOGE("rk_debug can't not find target function in %s ! \n",RK_XXX_PATH);
+                    dlclose(dso);
+                    return BAD_VALUE;
+                }
+                rockchipxxx3288((u8*)src_vaddr, (u8*)dst_vaddr, w, yuvTeximg[yuvIndex].yuvTexBuffer->getHeight(), src_stride, (src_r - src_l), 0);
+#endif
+                //PRINT_TIME_END("convert10to16_highbit_arm64_neon")
+                ALOGD("src_vaddr=%p,dst_vaddr=%p,crop_w=%d,crop_h=%d,stride=%f, src_stride=%d,raw_w=%d,raw_h=%d",
+                        src_vaddr, dst_vaddr, src_r - src_l,src_b - src_t,
+                        (src_r - src_l)*1.25+64,src_stride,gBuf->getWidth(),gBuf->getHeight());
+                //dump data
+                static int i =0;
+                char pro_value[PROPERTY_VALUE_MAX];
+
+                property_get("sys.dump_out_neon",pro_value,0);
+                if(i<10 && !strcmp(pro_value,"true"))
+                {
+                    char data_name[100];
+
+                    sprintf(data_name,"/data/dump/dmlayer%d_%d_%d.bin", i,
+                            yuvTeximg[yuvIndex].yuvTexBuffer->getWidth(),yuvTeximg[yuvIndex].yuvTexBuffer->getHeight());
+#if RK_HDR
+                    int n = yuvTeximg[yuvIndex].yuvTexBuffer->getHeight() * yuvTeximg[yuvIndex].yuvTexBuffer->getStride();
+#else
+                    int n = yuvTeximg[yuvIndex].yuvTexBuffer->getHeight() * yuvTeximg[yuvIndex].yuvTexBuffer->getStride() * 1.5;
+#endif
+                    ALOGD("dump %s size=%d", data_name, n );
+                    FILE *fp;
+                    if ((fp = fopen(data_name, "w+")) == NULL)
+                    {
+                        printf("can't open output.bin!!!!!\n");
+                    }
+                    fwrite(dst_vaddr, n, 1, fp);
+                    fclose(fp);
+                    i++;
+                }
+
+#elif RK_NV12_10_TO_NV12_BY_RGA
+                rgaCopyBit(gBuf, yuvTeximg[yuvIndex].yuvTexBuffer, CurrentCrop);
+#endif
+            bindExternalTextureBuffer(layer->source.buffer.textureName,
+                            yuvTeximg[yuvIndex].yuvTexBuffer, layer->source.buffer.fence);
+
+        }
+        else
+#endif
+        {
+            bindExternalTextureBuffer(layer->source.buffer.textureName, gBuf, layer->source.buffer.fence);
+        }
 
             usePremultipliedAlpha = layer->source.buffer.usePremultipliedAlpha;
             Texture texture(Texture::TEXTURE_EXTERNAL, layer->source.buffer.textureName);
-            mat4 texMatrix = layer->source.buffer.textureTransform;
+            mat4 texMatrix;
+            texMatrix = layer->source.buffer.textureTransform;
+
+#if (RK_NV12_10_TO_NV12_BY_RGA | RK_NV12_10_TO_NV12_BY_NENO | RK_HDR)
+            if(gBuf != NULL && gBuf->getPixelFormat() == HAL_PIXEL_FORMAT_YCrCb_NV12_10 )
+            {
+                mat4 unit;
+                texMatrix = unit;
+            }
+#endif
 
             texture.setMatrix(texMatrix.asArray());
             texture.setFiltering(layer->source.buffer.useTextureFiltering);
diff --git a/libs/renderengine/include/renderengine/LayerSettings.h b/libs/renderengine/include/renderengine/LayerSettings.h
index 95e9367fe..1adf68eb8 100644
--- a/libs/renderengine/include/renderengine/LayerSettings.h
+++ b/libs/renderengine/include/renderengine/LayerSettings.h
@@ -46,6 +46,9 @@ struct Buffer {
     // TODO(alecmouri): This is GL-specific...make the type backend-agnostic.
     uint32_t textureName = 0;
 
+    //rk_ext: add currentcrop for 10bit to 8bit
+    Rect currentcrop;
+
     // Whether to use filtering when rendering the texture.
     bool useTextureFiltering = false;
 
diff --git a/services/inputflinger/reader/Android.bp b/services/inputflinger/reader/Android.bp
index 83a610f76..f3d6c966b 100644
--- a/services/inputflinger/reader/Android.bp
+++ b/services/inputflinger/reader/Android.bp
@@ -35,6 +35,7 @@ filegroup {
         "mapper/InputMapper.cpp",
         "mapper/JoystickInputMapper.cpp",
         "mapper/KeyboardInputMapper.cpp",
+        "mapper/KeyMouseInputMapper.cpp",
         "mapper/MultiTouchInputMapper.cpp",
         "mapper/RotaryEncoderInputMapper.cpp",
         "mapper/SingleTouchInputMapper.cpp",
diff --git a/services/inputflinger/reader/EventHub.cpp b/services/inputflinger/reader/EventHub.cpp
index a1514af66..2838e966f 100644
--- a/services/inputflinger/reader/EventHub.cpp
+++ b/services/inputflinger/reader/EventHub.cpp
@@ -1325,7 +1325,7 @@ status_t EventHub::openDeviceLocked(const char* devicePath) {
             containsNonZeroByte(device->keyBitmask, sizeof_bit_array(BTN_JOYSTICK),
                                 sizeof_bit_array(BTN_DIGI));
     if (haveKeyboardKeys || haveGamepadButtons) {
-        device->classes |= INPUT_DEVICE_CLASS_KEYBOARD;
+        device->classes |= INPUT_DEVICE_CLASS_KEYBOARD | INPUT_DEVICE_CLASS_KEYMOUSE;
     }
 
     // See if this is a cursor device such as a trackball or mouse.
diff --git a/services/inputflinger/reader/InputDevice.cpp b/services/inputflinger/reader/InputDevice.cpp
index 3347ba6ad..3f0c41d23 100644
--- a/services/inputflinger/reader/InputDevice.cpp
+++ b/services/inputflinger/reader/InputDevice.cpp
@@ -30,6 +30,7 @@
 #include "SingleTouchInputMapper.h"
 #include "SwitchInputMapper.h"
 #include "VibratorInputMapper.h"
+#include "KeyMouseInputMapper.h"
 
 namespace android {
 
@@ -183,6 +184,12 @@ void InputDevice::addEventHubDevice(int32_t eventHubId, bool populateMappers) {
         mappers.push_back(std::make_unique<CursorInputMapper>(*contextPtr));
     }
 
+    // Mouser-like devices.
+    if (classes & INPUT_DEVICE_CLASS_KEYMOUSE) {
+        mappers.push_back(
+                std::make_unique<KeyMouseInputMapper>(*contextPtr));
+    }
+
     // Touchscreens and touchpad devices.
     if (classes & INPUT_DEVICE_CLASS_TOUCH_MT) {
         mappers.push_back(std::make_unique<MultiTouchInputMapper>(*contextPtr));
diff --git a/services/inputflinger/reader/include/EventHub.h b/services/inputflinger/reader/include/EventHub.h
index c17f3a184..dca48b960 100644
--- a/services/inputflinger/reader/include/EventHub.h
+++ b/services/inputflinger/reader/include/EventHub.h
@@ -119,6 +119,9 @@ enum {
     /* The input device has a rotary encoder */
     INPUT_DEVICE_CLASS_ROTARY_ENCODER = 0x00001000,
 
+    /* The input device has a mouse. */
+    INPUT_DEVICE_CLASS_KEYMOUSE       = 0x00004000,
+
     /* The input device is virtual (not a real device, not part of UI configuration). */
     INPUT_DEVICE_CLASS_VIRTUAL = 0x40000000,
 
diff --git a/services/inputflinger/reader/mapper/KeyMouseInputMapper.cpp b/services/inputflinger/reader/mapper/KeyMouseInputMapper.cpp
new file mode 100755
index 000000000..66958cc7e
--- /dev/null
+++ b/services/inputflinger/reader/mapper/KeyMouseInputMapper.cpp
@@ -0,0 +1,235 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "../Macros.h"
+
+#include "KeyMouseInputMapper.h"
+#include "TouchCursorInputMapperCommon.h"
+#include <cutils/properties.h>
+
+namespace android {
+
+// --- Static Definitions ---
+
+KeyMouseInputMapper::KeyMouseInputMapper(InputDeviceContext& deviceContext) : InputMapper(deviceContext) {
+}
+
+KeyMouseInputMapper::~KeyMouseInputMapper() {
+}
+
+uint32_t KeyMouseInputMapper::getSources() {
+    return AINPUT_SOURCE_MOUSE;
+}
+
+void KeyMouseInputMapper::populateDeviceInfo(InputDeviceInfo* info) {
+    InputMapper::populateDeviceInfo(info);
+}
+
+void KeyMouseInputMapper::dump(std::string& dump) {
+
+}
+
+void KeyMouseInputMapper::configure(nsecs_t when,
+        const InputReaderConfiguration* config, uint32_t changes) {
+
+    InputMapper::configure(when, config, changes);
+    mSource=AINPUT_SOURCE_MOUSE;
+    mXPrecision = 1.0f;
+    mYPrecision = 1.0f;
+	mPointerController = getContext()->getPointerController(getDeviceId());
+}
+
+void KeyMouseInputMapper::reset(nsecs_t when) {
+    mButtonState = 0;
+    mDownTime = 0;
+    mCursorButtonAccumulator.reset(getDeviceContext());
+
+    InputMapper::reset(when);
+}
+
+void KeyMouseInputMapper::process(const RawEvent* rawEvent) {
+
+        mCursorButtonAccumulator.process(rawEvent);
+
+        int mID;
+        char mgetDeviceID[PROPERTY_VALUE_MAX] = "";
+        property_get("sys.ID.mID", mgetDeviceID,0);
+        mID=atoi(mgetDeviceID);
+        if (rawEvent->type == EV_KEY && ((rawEvent->code== 310)||(rawEvent->code== 311)||(rawEvent->code== 312)||(rawEvent->code== 313))) {
+                mdeltax = 0;
+                mdeltay = 0;
+                sync(rawEvent->when);
+        }
+}
+
+void KeyMouseInputMapper::sync(nsecs_t when) {
+    int32_t lastButtonState = mButtonState;
+    int32_t currentButtonState = mCursorButtonAccumulator.getButtonState();
+    mButtonState = currentButtonState;
+    char mKeyLock[PROPERTY_VALUE_MAX] = "";
+    memset(mKeyLock,0,5);
+    property_get("sys.KeyMouse.mKeyMouseState", mKeyLock, "off");
+
+    bool wasDown = isPointerDown(lastButtonState);
+    bool down = isPointerDown(currentButtonState);
+    bool downChanged;
+    if (!wasDown && down) {
+        mDownTime = when;
+        downChanged = true;
+    } else if (wasDown && !down) {
+        downChanged = true;
+    } else {
+        downChanged = false;
+    }
+    nsecs_t downTime = mDownTime;
+    if(strcmp(mKeyLock, "off") == 0) {
+        return;
+    }
+    bool buttonsChanged = currentButtonState != lastButtonState;
+    int32_t buttonsPressed = currentButtonState & ~lastButtonState;
+    int32_t buttonsReleased = lastButtonState & ~currentButtonState;
+
+    float deltaX = mdeltax;
+    float deltaY = mdeltay;
+
+    // Rotate delta according to orientation if needed.
+    if (false) {
+        rotateDelta(DISPLAY_ORIENTATION_0, &deltaX, &deltaY);
+    }
+
+    // Move the pointer.
+    PointerProperties pointerProperties;
+    pointerProperties.clear();
+    pointerProperties.id = 0;
+    pointerProperties.toolType = AMOTION_EVENT_TOOL_TYPE_MOUSE;
+
+    PointerCoords pointerCoords;
+    pointerCoords.clear();
+
+    //paint the pointer of mouse here
+    uint32_t policyFlags = 0;
+    policyFlags |= POLICY_FLAG_WAKE;
+
+    int32_t displayId = ADISPLAY_ID_DEFAULT;
+    float xCursorPosition = AMOTION_EVENT_INVALID_CURSOR_POSITION;
+    float yCursorPosition = AMOTION_EVENT_INVALID_CURSOR_POSITION;
+
+    if (mPointerController != NULL) {
+		mPointerController->setPresentation(PointerControllerInterface::PRESENTATION_POINTER);
+        mPointerController->move(deltaX,deltaY);
+        mPointerController->unfade(PointerControllerInterface::TRANSITION_IMMEDIATE);
+
+        mPointerController->getPosition(&xCursorPosition, &yCursorPosition);
+        pointerCoords.setAxisValue(AMOTION_EVENT_AXIS_X, xCursorPosition);
+        pointerCoords.setAxisValue(AMOTION_EVENT_AXIS_Y, yCursorPosition);
+        displayId = mPointerController->getDisplayId();//ADISPLAY_ID_DEFAULT;
+    }
+    // Moving an external trackball or mouse should wake the device.
+    // We don't do this for internal cursor devices to prevent them from waking up
+    // the device in your pocket.
+    // TODO: Use the input device configuration to control this behavior more finely.
+
+    // Synthesize key down from buttons if needed.
+    synthesizeButtonKeys(getContext(), AKEY_EVENT_ACTION_DOWN, when, getDeviceId(), mSource,
+                  displayId, policyFlags, lastButtonState, currentButtonState);
+
+    // Send motion event.
+    if (downChanged || buttonsChanged) {
+        int32_t metaState = getContext()->getGlobalMetaState();
+        int32_t buttonState = lastButtonState;
+        int32_t motionEventAction;
+        if (downChanged) {
+            motionEventAction = down ? AMOTION_EVENT_ACTION_DOWN : AMOTION_EVENT_ACTION_UP;
+        } else if (down || (mSource != AINPUT_SOURCE_MOUSE)) {
+            motionEventAction = AMOTION_EVENT_ACTION_MOVE;
+        } else {
+            motionEventAction = AMOTION_EVENT_ACTION_HOVER_MOVE;
+        }
+        if (buttonsReleased) {
+            BitSet32 released(buttonsReleased);
+            while (!released.isEmpty()) {
+                int32_t actionButton = BitSet32::valueForBit(released.clearFirstMarkedBit());
+                buttonState &= ~actionButton;
+                NotifyMotionArgs releaseArgs(getContext()->getNextId(), when, getDeviceId(),
+                                             mSource, displayId, policyFlags,
+                                             AMOTION_EVENT_ACTION_BUTTON_RELEASE, actionButton, 0,
+                                             metaState, buttonState, MotionClassification::NONE,
+                                             AMOTION_EVENT_EDGE_FLAG_NONE, 1, &pointerProperties,
+                                             &pointerCoords, mXPrecision, mYPrecision,
+                                             xCursorPosition, yCursorPosition, downTime,
+                                             /* videoFrames */ {});
+                getListener()->notifyMotion(&releaseArgs);
+            }
+        }
+
+        NotifyMotionArgs args(getContext()->getNextId(), when, getDeviceId(), mSource, displayId,
+                              policyFlags, motionEventAction, 0, 0, metaState, currentButtonState,
+                              MotionClassification::NONE, AMOTION_EVENT_EDGE_FLAG_NONE, 1,
+                              &pointerProperties, &pointerCoords, mXPrecision, mYPrecision,
+                              xCursorPosition, yCursorPosition, downTime,
+                              /* videoFrames */ {});
+        getListener()->notifyMotion(&args);
+
+        if (buttonsPressed) {
+            BitSet32 pressed(buttonsPressed);
+            while (!pressed.isEmpty()) {
+                int32_t actionButton = BitSet32::valueForBit(pressed.clearFirstMarkedBit());
+                buttonState |= actionButton;
+                NotifyMotionArgs pressArgs(getContext()->getNextId(), when, getDeviceId(), mSource,
+                                           displayId, policyFlags,
+                                           AMOTION_EVENT_ACTION_BUTTON_PRESS, actionButton, 0,
+                                           metaState, buttonState, MotionClassification::NONE,
+                                           AMOTION_EVENT_EDGE_FLAG_NONE, 1, &pointerProperties,
+                                           &pointerCoords, mXPrecision, mYPrecision,
+                                           xCursorPosition, yCursorPosition, downTime,
+                                           /* videoFrames */ {});
+                getListener()->notifyMotion(&pressArgs);
+            }
+        }
+
+        ALOG_ASSERT(buttonState == currentButtonState);
+
+        // Send hover move after UP to tell the application that the mouse is hovering now.
+        if (motionEventAction == AMOTION_EVENT_ACTION_UP
+                && (mSource == AINPUT_SOURCE_MOUSE)) {
+            NotifyMotionArgs hoverArgs(getContext()->getNextId(), when, getDeviceId(), mSource,
+                                       displayId, policyFlags, AMOTION_EVENT_ACTION_HOVER_MOVE, 0,
+                                       0, metaState, currentButtonState, MotionClassification::NONE,
+                                       AMOTION_EVENT_EDGE_FLAG_NONE, 1, &pointerProperties,
+                                       &pointerCoords, mXPrecision, mYPrecision, xCursorPosition,
+                                       yCursorPosition, downTime, /* videoFrames */ {});
+            getListener()->notifyMotion(&hoverArgs);
+        }
+
+    }
+    // Synthesize key up from buttons if needed.
+    synthesizeButtonKeys(getContext(), AKEY_EVENT_ACTION_UP, when, getDeviceId(), mSource,
+            displayId, policyFlags, lastButtonState, currentButtonState);
+}
+
+int32_t KeyMouseInputMapper::getScanCodeState(uint32_t sourceMask, int32_t scanCode) {
+    if (scanCode >= BTN_MOUSE && scanCode < BTN_JOYSTICK) {
+        return getDeviceContext().getScanCodeState(scanCode);
+    } else {
+        return AKEY_STATE_UNKNOWN;
+    }
+}
+
+void KeyMouseInputMapper::fadePointer() {
+
+}
+
+} // namespace android
diff --git a/services/inputflinger/reader/mapper/KeyMouseInputMapper.h b/services/inputflinger/reader/mapper/KeyMouseInputMapper.h
new file mode 100755
index 000000000..7b590160a
--- /dev/null
+++ b/services/inputflinger/reader/mapper/KeyMouseInputMapper.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _UI_INPUTREADER_KEYMOUSE_INPUT_MAPPER_H
+#define _UI_INPUTREADER_KEYMOUSE_INPUT_MAPPER_H
+
+#include "InputMapper.h"
+#include "CursorButtonAccumulator.h"
+
+namespace android {
+
+class KeyMouseInputMapper : public InputMapper {
+
+public:
+    KeyMouseInputMapper(InputDeviceContext& deviceContext);
+    virtual ~KeyMouseInputMapper();
+
+    virtual uint32_t getSources();
+    virtual void populateDeviceInfo(InputDeviceInfo* deviceInfo);
+    virtual void dump(std::string& dump);
+    virtual void configure(nsecs_t when, const InputReaderConfiguration* config, uint32_t changes);
+    virtual void reset(nsecs_t when);
+    virtual void process(const RawEvent* rawEvent);
+
+    virtual int32_t getScanCodeState(uint32_t sourceMask, int32_t scanCode);
+
+    virtual void fadePointer();
+
+
+private:
+    CursorButtonAccumulator mCursorButtonAccumulator;
+    sp<PointerControllerInterface> mPointerController;
+
+    int32_t mSource;
+    float mdeltax, mdeltay;
+    int32_t mButtonState;
+    nsecs_t mDownTime;
+    float mXPrecision;
+    float mYPrecision;
+
+    void sync(nsecs_t when);
+};
+} // namespace android
+
+#endif // _UI_INPUTREADER_KEYMOUSE_INPUT_MAPPER_H
diff --git a/services/inputflinger/reader/mapper/KeyboardInputMapper.cpp b/services/inputflinger/reader/mapper/KeyboardInputMapper.cpp
index f98b92830..7fdc98547 100644
--- a/services/inputflinger/reader/mapper/KeyboardInputMapper.cpp
+++ b/services/inputflinger/reader/mapper/KeyboardInputMapper.cpp
@@ -17,6 +17,7 @@
 #include "../Macros.h"
 
 #include "KeyboardInputMapper.h"
+#include <cutils/properties.h>
 
 namespace android {
 
@@ -297,7 +298,24 @@ void KeyboardInputMapper::processKey(nsecs_t when, bool down, int32_t scanCode,
         policyFlags = 0;
     }
 
+    // Support simulate mouse function.
+    if (policyFlags & POLICY_FLAG_GESTURE) {
+        getDeviceContext().cancelTouch(when);
+    }
+    char mKeyMouseState[PROPERTY_VALUE_MAX] = "";
+    property_get("sys.KeyMouse.mKeyMouseState", mKeyMouseState, "off");
+    char mID[PROPERTY_VALUE_MAX] = "";
+    sprintf(mID,"%d",getDeviceId());
+    property_set("sys.ID.mID",mID);
+    
     if (down) {
+        if (keyCode == AKEYCODE_TV_KEYMOUSE_MODE_SWITCH) {
+                if (strcmp(mKeyMouseState, "on")==0) {
+                    property_set("sys.KeyMouse.mKeyMouseState", "off");
+                } else if (strcmp(mKeyMouseState,"off")==0) {
+                    property_set("sys.KeyMouse.mKeyMouseState","on");
+                }
+            }
         // Rotate key codes according to orientation if needed.
         if (mParameters.orientationAware) {
             keyCode = rotateKeyCode(keyCode, getOrientation(), mRotationMapOffset);
@@ -365,7 +383,21 @@ void KeyboardInputMapper::processKey(nsecs_t when, bool down, int32_t scanCode,
     if (mParameters.handlesKeyRepeat) {
         policyFlags |= POLICY_FLAG_DISABLE_KEY_REPEAT;
     }
-
+    if (down && !isMetaKey(keyCode)) {
+        getContext()->fadePointer();
+    }
+    //
+    if (strcmp(mKeyMouseState, "on") == 0) {
+        if(keyCode == AKEYCODE_DPAD_LEFT) {
+             keyCode = AKEYCODE_TV_KEYMOUSE_LEFT;
+        } else if (keyCode == AKEYCODE_DPAD_RIGHT) {
+             keyCode = AKEYCODE_TV_KEYMOUSE_RIGHT;
+        } else if (keyCode == AKEYCODE_DPAD_UP) {
+             keyCode = AKEYCODE_TV_KEYMOUSE_UP;
+        } else if (keyCode == AKEYCODE_DPAD_DOWN) {
+             keyCode = AKEYCODE_TV_KEYMOUSE_DOWN;
+        }
+    }
     NotifyKeyArgs args(getContext()->getNextId(), when, getDeviceId(), mSource, getDisplayId(),
                        policyFlags, down ? AKEY_EVENT_ACTION_DOWN : AKEY_EVENT_ACTION_UP,
                        AKEY_EVENT_FLAG_FROM_SYSTEM, keyCode, scanCode, keyMetaState, downTime);
diff --git a/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.cpp b/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.cpp
index 2d7d73b4a..fc593bd8b 100644
--- a/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.cpp
+++ b/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.cpp
@@ -18,22 +18,31 @@
 
 #include "EventHub.h"
 #include "InputDevice.h"
+#include <cutils/properties.h>
 
 namespace android {
 
+static const int KEYCODE_BUTTON_R1 	= 311;
+static const int KEYCODE_BUTTON_R2 	= 313;
+static const int KEYCODE_BUTTON_L1 	= 310;
+static const int KEYCODE_BUTTON_L2 	= 312;
 CursorButtonAccumulator::CursorButtonAccumulator() {
     clearButtons();
 }
 
 void CursorButtonAccumulator::reset(InputDeviceContext& deviceContext) {
+    mBtnLeft = deviceContext.isKeyPressed(KEYCODE_BUTTON_L1);
     mBtnLeft = deviceContext.isKeyPressed(BTN_LEFT);
     mBtnRight = deviceContext.isKeyPressed(BTN_RIGHT);
+    mBtnMiddle = deviceContext.isKeyPressed(KEYCODE_BUTTON_R2);
     mBtnMiddle = deviceContext.isKeyPressed(BTN_MIDDLE);
+    mBtnBack = deviceContext.isKeyPressed(KEYCODE_BUTTON_L2);
     mBtnBack = deviceContext.isKeyPressed(BTN_BACK);
     mBtnSide = deviceContext.isKeyPressed(BTN_SIDE);
     mBtnForward = deviceContext.isKeyPressed(BTN_FORWARD);
     mBtnExtra = deviceContext.isKeyPressed(BTN_EXTRA);
     mBtnTask = deviceContext.isKeyPressed(BTN_TASK);
+    mBtnOk = deviceContext.isKeyPressed(KEYCODE_BUTTON_R1);        
 }
 
 void CursorButtonAccumulator::clearButtons() {
@@ -45,6 +54,7 @@ void CursorButtonAccumulator::clearButtons() {
     mBtnForward = 0;
     mBtnExtra = 0;
     mBtnTask = 0;
+    mBtnOk = 0;
 }
 
 void CursorButtonAccumulator::process(const RawEvent* rawEvent) {
@@ -74,6 +84,30 @@ void CursorButtonAccumulator::process(const RawEvent* rawEvent) {
             case BTN_TASK:
                 mBtnTask = rawEvent->value;
                 break;
+            case KEYCODE_BUTTON_R1: {
+                char mKeyMouseState[PROPERTY_VALUE_MAX] = {0};
+                property_get("sys.KeyMouse.mKeyMouseState", mKeyMouseState, "off");
+                if (strcmp(mKeyMouseState, "on") == 0)
+                    mBtnOk = rawEvent->value; }
+                break;
+            case KEYCODE_BUTTON_L1:{
+                char mKeyMouseState[PROPERTY_VALUE_MAX] = {0};
+                property_get("sys.KeyMouse.mKeyMouseState", mKeyMouseState, "off");
+                if (strcmp(mKeyMouseState, "on") == 0)
+                    mBtnRight = rawEvent->value;}
+                break;
+            case KEYCODE_BUTTON_R2:{
+                char mKeyMouseState[PROPERTY_VALUE_MAX] = {0};
+                property_get("sys.KeyMouse.mKeyMouseState", mKeyMouseState, "off");
+                if (strcmp(mKeyMouseState, "on") == 0)                
+                    mBtnMiddle = rawEvent->value;}
+                break;
+            case KEYCODE_BUTTON_L2:{
+                char mKeyMouseState[PROPERTY_VALUE_MAX] = {0};
+                property_get("sys.KeyMouse.mKeyMouseState", mKeyMouseState, "off");
+                if (strcmp(mKeyMouseState, "on") == 0)                
+                    mBtnBack = rawEvent->value;}
+                break;
         }
     }
 }
@@ -83,14 +117,21 @@ uint32_t CursorButtonAccumulator::getButtonState() const {
     if (mBtnLeft) {
         result |= AMOTION_EVENT_BUTTON_PRIMARY;
     }
+    if (mBtnOk) {
+       char mKeyMouseState[PROPERTY_VALUE_MAX] = {0};
+        property_get("sys.KeyMouse.mKeyMouseState", mKeyMouseState, "off");
+        if (strcmp(mKeyMouseState, "on") == 0) {
+         result |= AMOTION_EVENT_BUTTON_PRIMARY;
+        }
+    }
     if (mBtnRight) {
-        result |= AMOTION_EVENT_BUTTON_SECONDARY;
+        result |= AMOTION_EVENT_BUTTON_BACK;
     }
     if (mBtnMiddle) {
         result |= AMOTION_EVENT_BUTTON_TERTIARY;
     }
     if (mBtnBack || mBtnSide) {
-        result |= AMOTION_EVENT_BUTTON_BACK;
+        result |= AMOTION_EVENT_BUTTON_SECONDARY;
     }
     if (mBtnForward || mBtnExtra) {
         result |= AMOTION_EVENT_BUTTON_FORWARD;
diff --git a/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.h b/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.h
index 9e159064f..82ccd8144 100644
--- a/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.h
+++ b/services/inputflinger/reader/mapper/accumulator/CursorButtonAccumulator.h
@@ -43,10 +43,11 @@ private:
     bool mBtnForward;
     bool mBtnExtra;
     bool mBtnTask;
+    bool mBtnOk;
 
     void clearButtons();
 };
 
 } // namespace android
 
-#endif // _UI_INPUTREADER_CURSOR_BUTTON_ACCUMULATOR_H
\ No newline at end of file
+#endif // _UI_INPUTREADER_CURSOR_BUTTON_ACCUMULATOR_H
diff --git a/services/surfaceflinger/BufferLayer.cpp b/services/surfaceflinger/BufferLayer.cpp
index f0b0200bc..8787232a2 100644
--- a/services/surfaceflinger/BufferLayer.cpp
+++ b/services/surfaceflinger/BufferLayer.cpp
@@ -261,6 +261,8 @@ std::optional<compositionengine::LayerFE::LayerSettings> BufferLayer::prepareCli
             mat4::translate(vec4(-.5, -.5, 0, 1)) *
             mat4::translate(vec4(translateX, translateY, 0, 1)) *
             mat4::scale(vec4(scaleWidth, scaleHeight, 1.0, 1.0));
+    //rk_ext: Deliver to GLESRenderEngine for 10bit to 8bit
+    layer.source.buffer.currentcrop = mBufferInfo.mCrop;
 
     layer.source.buffer.useTextureFiltering = useFiltering;
     layer.source.buffer.textureTransform = mat4(static_cast<const float*>(textureMatrix)) * tr;
-- 
2.25.1

