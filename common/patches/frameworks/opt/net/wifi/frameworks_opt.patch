diff --git a/libwifi_hal/Android.mk b/libwifi_hal/Android.mk
index 3c05d9b57..7f2f547b8 100644
--- a/libwifi_hal/Android.mk
+++ b/libwifi_hal/Android.mk
@@ -22,7 +22,7 @@ wifi_hal_cflags := \
     -Wno-unused-function \
     -Wno-unused-parameter \
     -Wshadow \
-    -Wunused-variable \
+    -Wno-unused-variable \
     -Wwrite-strings
 ifdef WIFI_DRIVER_MODULE_PATH
 wifi_hal_cflags += -DWIFI_DRIVER_MODULE_PATH=\"$(WIFI_DRIVER_MODULE_PATH)\"
@@ -60,6 +60,10 @@ ifdef WIFI_DRIVER_STATE_OFF
 wifi_hal_cflags += -DWIFI_DRIVER_STATE_OFF=\"$(WIFI_DRIVER_STATE_OFF)\"
 endif
 
+ifeq ($(MULTI_WIFI_SUPPORT), true)
+wifi_hal_cflags += -DMULTI_WIFI_SUPPORT
+endif
+
 # Common code shared between the HALs.
 # ============================================================
 include $(CLEAR_VARS)
@@ -100,11 +104,12 @@ else ifeq ($(BOARD_WLAN_DEVICE), mrvl)
 else ifeq ($(BOARD_WLAN_DEVICE), MediaTek)
   # support MTK WIFI HAL
   LIB_WIFI_HAL := libwifi-hal-mt66xx
+else ifeq ($(BOARD_WLAN_DEVICE), rtl8812au)
+  # support realtek WIFI HAL
+  LIB_WIFI_HAL := libwifi-hal-rtl
 else ifeq ($(BOARD_WLAN_DEVICE), realtek)
   # support Realtek WIFI HAL
   LIB_WIFI_HAL := libwifi-hal-rtk
-else ifeq ($(BOARD_WLAN_DEVICE), emulator)
-  LIB_WIFI_HAL := libwifi-hal-emu
 else ifeq ($(BOARD_WLAN_DEVICE), slsi)
   LIB_WIFI_HAL := libwifi-hal-slsi
 endif
diff --git a/libwifi_hal/wifi_hal_common.cpp b/libwifi_hal/wifi_hal_common.cpp
index 0d8e0fbe0..ff65f9605 100644
--- a/libwifi_hal/wifi_hal_common.cpp
+++ b/libwifi_hal/wifi_hal_common.cpp
@@ -19,12 +19,117 @@
 #include <fcntl.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <stdio.h>
+#include <string.h>
+#include <dirent.h>
 
 #include <android-base/logging.h>
 #include <cutils/misc.h>
 #include <cutils/properties.h>
 #include <sys/syscall.h>
 
+#define finit_module(fd, opts, flags) syscall(SYS_finit_module, fd, opts, flags)
+
+#ifdef MULTI_WIFI_SUPPORT
+#include <dlfcn.h>
+typedef int (*WIFI_LOAD_DRIVER) ();
+typedef int (*WIFI_UNLOAD_DRIVER) ();
+typedef int (*WIFI_CHANGE_FW_PATH) (const char *fwpath);
+typedef const char * (*WIFI_GET_FW_PATH) (int fw_type);
+typedef const char * (*WIFI_GET_VENDOR_NAME) ();
+
+void* pHandle = NULL;
+
+void* init_multi_wifi_handle() {
+  if (pHandle == NULL) {
+    pHandle = dlopen("libwifi-hal-common-ext.so", RTLD_NOW);
+    if (pHandle == NULL) {
+      PLOG(ERROR) << "Unable to get multi wifi so";
+      return NULL;
+    }
+  }
+  return pHandle;
+}
+
+void release_multi_wifi_handle() {
+  if (pHandle != NULL) {
+    dlclose(pHandle);
+    pHandle = NULL;
+  }
+}
+
+int wifi_load_driver_ext() {
+  void* handle = init_multi_wifi_handle();
+  if (handle != NULL) {
+    WIFI_LOAD_DRIVER pFunc = (WIFI_LOAD_DRIVER)dlsym(handle, "_Z20wifi_load_driver_extv");
+    if (pFunc == NULL) {
+      LOG(ERROR) << "Unable to get multi wifi wifi_load_driver_ext function";
+      return -1;
+    }
+    return pFunc();
+  }
+  return -1;
+}
+
+int wifi_unload_driver_ext() {
+  void* handle = init_multi_wifi_handle();
+  if (handle != NULL) {
+    WIFI_UNLOAD_DRIVER pFunc = (WIFI_UNLOAD_DRIVER)dlsym(handle, "_Z22wifi_unload_driver_extv");
+    if (pFunc == NULL) {
+      LOG(ERROR) << "Unable to get multi wifi wifi_unload_driver_ext function";
+      return -1;
+    }
+
+    int ret = pFunc();
+    release_multi_wifi_handle();
+    return ret;
+  }
+
+  return -1;
+}
+
+const char *wifi_get_fw_path_ext(int fw_type) {
+  void* handle = init_multi_wifi_handle();
+  if (handle != NULL) {
+    WIFI_GET_FW_PATH pFunc = (WIFI_GET_FW_PATH)dlsym(handle, "_Z20wifi_get_fw_path_exti");
+    if (pFunc == NULL) {
+      LOG(ERROR) << "Unable to get multi wifi wifi_get_fw_path_ext function";
+      return NULL;
+    }
+    return pFunc(fw_type);
+  }
+
+  return NULL;
+}
+
+int wifi_change_fw_path_ext(const char *fwpath) {
+  void* handle = init_multi_wifi_handle();
+  if (handle != NULL) {
+    WIFI_CHANGE_FW_PATH pFunc = (WIFI_CHANGE_FW_PATH)dlsym(handle, "_Z23wifi_change_fw_path_extPKc");
+    if (pFunc == NULL) {
+      LOG(ERROR) << "Unable to get multi wifi wifi_change_fw_path_ext function";
+      return -1;
+    }
+    return pFunc(fwpath);
+  }
+
+  return -1;
+}
+
+const char *get_wifi_vendor_name() {
+  void* handle = init_multi_wifi_handle();
+  if (handle != NULL) {
+    WIFI_GET_VENDOR_NAME pFunc = (WIFI_GET_VENDOR_NAME)dlsym(handle, "_Z20get_wifi_vendor_namev");
+    if (pFunc == NULL) {
+      LOG(ERROR) << "Unable to get multi wifi get_wifi_vendor_name function";
+      return NULL;
+    }
+    return pFunc();
+  }
+
+  return NULL;
+}
+#endif
 extern "C" int init_module(void *, unsigned long, const char *);
 extern "C" int delete_module(const char *, unsigned int);
 
@@ -45,15 +150,27 @@ extern "C" int delete_module(const char *, unsigned int);
 static const char DRIVER_PROP_NAME[] = "wlan.driver.status";
 static bool is_driver_loaded = false;
 #ifdef WIFI_DRIVER_MODULE_PATH
-static const char DRIVER_MODULE_NAME[] = WIFI_DRIVER_MODULE_NAME;
-static const char DRIVER_MODULE_TAG[] = WIFI_DRIVER_MODULE_NAME " ";
-static const char DRIVER_MODULE_PATH[] = WIFI_DRIVER_MODULE_PATH;
+static const char DRIVER_PROP_TAG[] = "wlan.driver.tag";
+#endif
+#ifdef WIFI_DRIVER_MODULE_PATH
 static const char DRIVER_MODULE_ARG[] = WIFI_DRIVER_MODULE_ARG;
 static const char MODULE_FILE[] = "/proc/modules";
 #endif
 
 static int insmod(const char *filename, const char *args) {
   int ret;
+#ifdef MULTI_WIFI_SUPPORT
+  void *module;
+  unsigned int size;
+
+  module = load_file(filename, &size);
+  if (!module) return -1;
+
+  //ret = init_module(module, size, args);
+  ret = finit_module(module, args, 0);
+
+  free(module);
+#else
   int fd;
 
   fd = TEMP_FAILURE_RETRY(open(filename, O_RDONLY | O_CLOEXEC | O_NOFOLLOW));
@@ -69,6 +186,8 @@ static int insmod(const char *filename, const char *args) {
     PLOG(ERROR) << "finit_module return: " << ret;
   }
 
+#endif
+
   return ret;
 }
 
@@ -111,11 +230,21 @@ int wifi_change_driver_state(const char *state) {
 }
 #endif
 
+static struct wifi_modules {
+  int vid;
+  int pid;
+  char tag[32];
+  char modules[16][PATH_MAX];
+  int nr_modules;
+} wifi_modules = {
+  .nr_modules = 0,
+};
+
 int is_wifi_driver_loaded() {
   char driver_status[PROPERTY_VALUE_MAX];
 #ifdef WIFI_DRIVER_MODULE_PATH
   FILE *proc;
-  char line[sizeof(DRIVER_MODULE_TAG) + 10];
+  char line[32];
 #endif
 
   if (!property_get(DRIVER_PROP_NAME, driver_status, NULL)) {
@@ -142,7 +271,7 @@ int is_wifi_driver_loaded() {
     return 0;
   }
   while ((fgets(line, sizeof(line), proc)) != NULL) {
-    if (strncmp(line, DRIVER_MODULE_TAG, strlen(DRIVER_MODULE_TAG)) == 0) {
+    if (strncmp(line, wifi_modules.tag, strlen(wifi_modules.tag)) == 0) {
       fclose(proc);
       return 1;
     }
@@ -158,13 +287,176 @@ int is_wifi_driver_loaded() {
 #endif
 }
 
+struct wifi_usbdev *gWifiUSBdev;
+
+static int wifi_usb_read_id(const char* entry, int *vid, int *pid)
+{
+  char buf[4 + 1] = {'\0', };
+  char node[50];
+  int fd = -1;
+
+  sprintf(node, "/sys/bus/usb/devices/%s/idVendor", entry);
+  fd = open(node, O_RDONLY);
+  if (fd < 0)
+    return -ENOENT;
+
+  read(fd, buf, 4);
+  close(fd);
+
+  *vid = strtol(buf, NULL, 16);
+
+  sprintf(node, "/sys/bus/usb/devices/%s/idProduct", entry);
+  fd = open(node, O_RDONLY);
+  if (fd < 0)
+    return -ENOENT;
+
+  read(fd, buf, 4);
+  close(fd);
+
+  *pid = strtol(buf, NULL, 16);
+
+  return 0;
+}
+
+static char* path2tag(const char* path, char* tag)
+{
+  int len;
+  char *p = (char *)strrchr(path, '/');
+
+
+  strcpy(tag, p + 1);    /* Ingnore the first '/' start with */
+  len = strlen(tag) - 3;    /* 3 = strlen(".ko") */
+
+  /* truncate ".ko" extension from driver name */
+  if (!strcmp(tag + len, ".ko"))
+      *(char*)(tag + len) = 0;
+
+  /* replace '-' to '_' in the driver name since '_' is used in module
+   * name intead of '-' when it is loaded
+   */
+  while (len--)
+    if (tag[len] == '-')
+      tag[len] = '_';
+
+  return tag;
+}
+
+int load_wifi_list(struct wifi_modules* drv)
+{
+    FILE *fp;
+    char line[128];
+    int vid, pid;
+    char tag[32], probe[PATH_MAX];
+    int found = 0;
+    int i = 0;
+
+    if ((fp = fopen("/vendor/etc/wifi_id_list.txt", "r")) == NULL)
+        return 0;
+
+    /*
+     * scan the USB list with VID:PID attached
+     */
+    while (fgets(line, sizeof(line), fp)) {
+        sscanf(line, "%04x %04x %s %s", &vid, &pid, tag, probe);
+        if ((drv->vid == vid) && (drv->pid == pid)) {
+            LOG(INFO) << "USB WiFi device is detected, [" 
+                << std::hex << drv->vid << ":" << std::hex << drv->pid << "]";
+            found = 1;
+            break;
+        }
+    }
+    fclose(fp);
+
+    if (!found)
+        return 0;
+
+    /*
+     * 'probe' stores the specific driver list to load
+     */
+    if ((fp = fopen(probe, "r")) == NULL)
+        return 0;
+
+    drv->nr_modules = 0;
+    for (i = 0; i < (int)(sizeof(drv->modules) / sizeof(drv->modules[0])); i++) {
+        if (fgets(drv->modules[i], sizeof(drv->modules[i]) - 1, fp) == NULL) {
+            path2tag(drv->modules[i - 1], drv->tag);
+            drv->nr_modules = i;
+            break;
+        }
+        /* truncate '\n' at the end of line */
+        drv->modules[i][strlen(drv->modules[i]) - 1] = 0;
+    }
+
+    fclose(fp);
+
+    return drv->nr_modules;
+}
+
 int wifi_load_driver() {
 #ifdef WIFI_DRIVER_MODULE_PATH
+#ifdef MULTI_WIFI_SUPPORT
+  if (wifi_load_driver_ext() != 0) {
+    return -1;
+  } else {
+    if (strncmp(get_wifi_vendor_name(), "bcm", 3) == 0)
+      property_set(DRIVER_PROP_NAME, "ok");
+
+    return 0;
+  }
+#endif
+
+  int i = 0;
+
+  DIR *dir = opendir("/sys/bus/usb/devices/");
+  if (dir == NULL)
+    return 0;
+
+  static bool first = true;
+
+  if (first) {
+      // The multi-mode USB device(0bda:1a2b) needs time
+      // to change wifi(0bda:c820) device by usb_modeswitch when system boot.
+      sleep(2);
+      first = false;
+  }
+
+  struct dirent *dent;
+
+  int vid, pid;
+  int err;
+  while ((dent = readdir(dir)) != NULL) {
+    vid = 0;
+    pid = 0;
+    err = -1;
+
+    err = wifi_usb_read_id(dent->d_name, &vid, &pid);
+    if (err < 0)
+      continue;
+
+    wifi_modules.vid = vid;
+    wifi_modules.pid = pid;
+    if (load_wifi_list(&wifi_modules))
+        break;
+  }
+  closedir(dir);
+
+  if (wifi_modules.nr_modules == 0)
+    return -1;
+
+  //strcpy((char *)DRIVER_MODULE_TAG, wifi_modules.tag);
+
   if (is_wifi_driver_loaded()) {
     return 0;
   }
 
-  if (insmod(DRIVER_MODULE_PATH, DRIVER_MODULE_ARG) < 0) return -1;
+  for (i = 0; i < wifi_modules.nr_modules; i++) {
+    char *drv = wifi_modules.modules[i];
+    LOG(INFO) << "Loading " << drv;
+    if (insmod(drv, DRIVER_MODULE_ARG) < 0)
+      return -1;
+    usleep(200000);
+  }
+  property_set(DRIVER_PROP_TAG, wifi_modules.tag);
 #endif
 
 #ifdef WIFI_DRIVER_STATE_CTRL_PARAM
@@ -172,55 +464,56 @@ int wifi_load_driver() {
     return 0;
   }
 
-  if (wifi_change_driver_state(WIFI_DRIVER_STATE_ON) < 0) {
-#ifdef WIFI_DRIVER_MODULE_PATH
-    PLOG(WARNING) << "Driver unloading, err='fail to change driver state'";
-    if (rmmod(DRIVER_MODULE_NAME) == 0) {
-      PLOG(DEBUG) << "Driver unloaded";
-    } else {
-      // Set driver prop to "ok", expect HL to restart Wi-Fi.
-      PLOG(DEBUG) << "Driver unload failed! set driver prop to 'ok'.";
-      property_set(DRIVER_PROP_NAME, "ok");
-    }
-#endif
-    return -1;
-  }
+  if (wifi_change_driver_state(WIFI_DRIVER_STATE_ON) < 0) return -1;
 #endif
+      property_set(DRIVER_PROP_NAME, "ok");
   is_driver_loaded = true;
   return 0;
 }
 
 int wifi_unload_driver() {
+#ifdef MULTI_WIFI_SUPPORT
+  wifi_unload_driver_ext();
+  property_set(DRIVER_PROP_NAME, "unloaded");
+  return 0;
+#endif
+
   if (!is_wifi_driver_loaded()) {
     return 0;
   }
+  usleep(200000); /* allow to finish interface down */
 #ifdef WIFI_DRIVER_MODULE_PATH
-  if (rmmod(DRIVER_MODULE_NAME) == 0) {
+  char drvname[80];
+  while (wifi_modules.nr_modules > 0) {
+    wifi_modules.nr_modules--;
+    path2tag(wifi_modules.modules[wifi_modules.nr_modules], drvname);
+    if (rmmod(drvname) == 0) {
     int count = 20; /* wait at most 10 seconds for completion */
     while (count-- > 0) {
       if (!is_wifi_driver_loaded()) break;
       usleep(500000);
     }
     usleep(500000); /* allow card removal */
-    if (count) {
-      return 0;
     }
-    return -1;
-  } else
-    return -1;
+  }
+  property_set(DRIVER_PROP_TAG, "");
 #else
 #ifdef WIFI_DRIVER_STATE_CTRL_PARAM
   if (is_wifi_driver_loaded()) {
     if (wifi_change_driver_state(WIFI_DRIVER_STATE_OFF) < 0) return -1;
   }
+#endif
 #endif
   is_driver_loaded = false;
   property_set(DRIVER_PROP_NAME, "unloaded");
   return 0;
-#endif
 }
 
 const char *wifi_get_fw_path(int fw_type) {
+#ifdef MULTI_WIFI_SUPPORT
+  return wifi_get_fw_path_ext(fw_type);
+#endif
+
   switch (fw_type) {
     case WIFI_GET_FW_PATH_STA:
       return WIFI_DRIVER_FW_PATH_STA;
@@ -236,6 +529,9 @@ int wifi_change_fw_path(const char *fwpath) {
   int len;
   int fd;
   int ret = 0;
+#ifdef MULTI_WIFI_SUPPORT
+  return wifi_change_fw_path_ext(fwpath);
+#endif
 
   if (!fwpath) return ret;
   fd = TEMP_FAILURE_RETRY(open(WIFI_DRIVER_FW_PATH_PARAM, O_WRONLY));
diff --git a/service/java/com/android/server/wifi/scanner/WificondScannerImpl.java b/service/java/com/android/server/wifi/scanner/WificondScannerImpl.java
index 66e0cfbaa..350067550 100644
--- a/service/java/com/android/server/wifi/scanner/WificondScannerImpl.java
+++ b/service/java/com/android/server/wifi/scanner/WificondScannerImpl.java
@@ -371,7 +371,9 @@ public class WificondScannerImpl extends WifiScannerImpl implements Handler.Call
                 if (timestamp_ms > mLastScanSettings.startTime) {
                     if (mLastScanSettings.singleScanFreqs.containsChannel(
                                     result.frequency)) {
-                        singleScanResults.add(result);
+                    // ODROID add result anyway.
+                    singleScanResults.add(result);
+                    //numFilteredScanResults++;
                     }
                 } else {
                     numFilteredScanResults++;

