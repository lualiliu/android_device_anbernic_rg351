diff --git a/hardware.c b/hardware.c
index 6e72ce9f..d353a986 100644
--- a/hardware.c
+++ b/hardware.c
@@ -15,6 +15,7 @@
  */
 
 #include <hardware/hardware.h>
+#include <hardware/gralloc.h>
 
 #include <cutils/properties.h>
 
@@ -247,7 +248,26 @@ found:
     return load(class_id, path, module);
 }
 
+const static hw_module_t* s_gralloc_module = NULL;
 int hw_get_module(const char *id, const struct hw_module_t **module)
 {
-    return hw_get_module_by_class(id, NULL, module);
+    int ret = 0;
+
+    if ( 0 == strcmp(id, GRALLOC_HARDWARE_MODULE_ID) )
+    {
+        if (NULL != s_gralloc_module )
+        {
+            *module = s_gralloc_module;
+            return 0;
+        }
+    }
+
+    ret = hw_get_module_by_class(id, NULL, module);
+
+    if ( 0 == strcmp(id, GRALLOC_HARDWARE_MODULE_ID) )
+    {
+        s_gralloc_module = *module;
+    }
+
+    return ret;
 }
diff --git a/include/hardware/gralloc.h b/include/hardware/gralloc.h
index 10a153c0..0907fbf2 100644
--- a/include/hardware/gralloc.h
+++ b/include/hardware/gralloc.h
@@ -139,6 +139,22 @@ enum {
      * gralloc modules. */
     GRALLOC_USAGE_ALLOC_MASK            = ~(GRALLOC_USAGE_FOREIGN_BUFFERS),
 
+
+    /* buffer may be used as a cursor */
+    GRALLOC_USAGE_ROT_MASK              = 0x0F000000,
+
+    GRALLOC_USAGE_TO_USE_SINGLE_BUFFER  = 0x0B000000,
+
+    /* mali p010 format */
+    GRALLOC_USAGE_TO_USE_ARM_P010       = 0x0A000000,
+    /* would like to use a fbdc(afbc) format. */
+    GRALLOC_USAGE_TO_USE_FBDC_FMT       = 0x09000000,
+    /* use Physically Continuous memory */
+    GRALLOC_USAGE_TO_USE_PHY_CONT	= 0x08000000,
+    /* replacement of GRALLOC_USAGE_EXTERNAL_DISP,
+     * which is treated as invalid by frameworks. */
+    GRALLOC_USAGE__RK_EXT__EXTERNAL_DISP= 0x07000000U,
+
     /* implementation-specific private usage flags */
     GRALLOC_USAGE_PRIVATE_0             = 0x10000000U,
     GRALLOC_USAGE_PRIVATE_1             = 0x20000000U,
@@ -147,6 +163,123 @@ enum {
     GRALLOC_USAGE_PRIVATE_MASK          = 0xF0000000U,
 };
 
+/**
+ * perform operation commands for rk gralloc.
+ * Helpers for using the non-type-safe perform() extension functions. Use
+ * these helpers instead of calling perform() directly in your application.
+ */
+enum {
+  /****************Implement****************/
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_PHY_ADDR       = 0x08100001,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_PRIME_FD       = 0x08100002,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_ATTRIBUTES     = 0x08100004,
+  GRALLOC_MODULE_PERFORM_GET_INTERNAL_FORMAT       = 0x08100006,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_WIDTH          = 0x08100008,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_HEIGHT         = 0x0810000A,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_STRIDE         = 0x0810000C,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_BYTE_STRIDE    = 0x0810000E,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_FORMAT         = 0x08100010,
+  GRALLOC_MODULE_PERFORM_GET_HADNLE_SIZE           = 0x08100012,
+
+  GRALLOC_MODULE_PERFORM_GET_RK_ASHMEM             = 0x08100014,
+  GRALLOC_MODULE_PERFORM_SET_RK_ASHMEM             = 0x08100016,
+
+  /* perform(const struct gralloc_module_t *mod,
+   *     int op,
+   *     buffer_handle_t buffer,
+   *     int *usage);
+   */
+  GRALLOC_MODULE_PERFORM_GET_USAGE = 0x0feeff03,
+
+
+  /****************Not Implement****************/
+  GRALLOC_MODULE_PERFORM_GET_DRM_FD                = 0x08000002,
+  /* perform(const struct gralloc_module_t *mod,
+   *       int op,
+   *       int drm_fd,
+   *       buffer_handle_t buffer,
+   *       struct hwc_drm_bo *bo);
+   */
+  GRALLOC_MODULE_PERFORM_DRM_IMPORT = 0xffeeff00,
+
+  /* perform(const struct gralloc_module_t *mod,
+   *       int op,
+   *       buffer_handle_t buffer,
+   *       void (*free_callback)(void *),
+   *       void *priv);
+   */
+  GRALLOC_MODULE_PERFORM_SET_IMPORTER_PRIVATE = 0xffeeff01,
+
+  /* perform(const struct gralloc_module_t *mod,
+   *       int op,
+   *       buffer_handle_t buffer,
+   *       void (*free_callback)(void *),
+   *       void **priv);
+   */
+  GRALLOC_MODULE_PERFORM_GET_IMPORTER_PRIVATE = 0xffeeff02,
+};
+
+//eotf type
+enum supported_eotf_type {
+        TRADITIONAL_GAMMA_SDR = 0,
+        TRADITIONAL_GAMMA_HDR,
+        SMPTE_ST2084,  /* HDR10 */
+        HLG,           /* HLG */
+        FUTURE_EOTF
+};
+
+//hdmi_output_colorimetry type
+enum supported_hdmi_colorimetry {
+	COLOR_METRY_NONE=0,
+	COLOR_METRY_ITU_2020=9
+};
+
+struct hdr_static_metadata {
+       uint16_t eotf;
+       uint16_t type;
+       uint16_t display_primaries_x[3];
+       uint16_t display_primaries_y[3];
+       uint16_t white_point_x;
+       uint16_t white_point_y;
+       uint16_t max_mastering_display_luminance;
+       uint16_t min_mastering_display_luminance;
+       uint16_t max_fall;
+       uint16_t max_cll;
+       uint16_t min_cll;
+};
+
+//For Kernel 4.19
+struct hdr_metadata_infoframe {
+      __u8 eotf;
+      __u8 metadata_type;
+      struct {
+         __u16 x, y;
+         } display_primaries[3];
+      struct {
+         __u16 x, y;
+         } white_point;
+      __u16 max_display_mastering_luminance;
+      __u16 min_display_mastering_luminance;
+      __u16 max_cll;
+      __u16 max_fall;
+};
+
+struct hdr_output_metadata {
+    __u32 metadata_type;
+    union {
+        struct hdr_metadata_infoframe hdmi_metadata_type;
+    };
+};
+//End
+
+#define maxLayerNameLength		100
+typedef struct rk_ashmem_t
+{
+    int32_t alreadyStereo;
+    int32_t displayStereo;
+    char LayerName[maxLayerNameLength + 1];
+} rk_ashmem_t;
+
 /*****************************************************************************/
 
 /**
@@ -340,7 +473,7 @@ typedef struct gralloc_module_t {
      */
     int32_t (*validateBufferSize)(
             struct gralloc_module_t const* device, buffer_handle_t handle,
-            uint32_t w, uint32_t h, int32_t format, int usage,
+            uint32_t w, uint32_t h, int32_t format, int usage, int layer_count,
             uint32_t stride);
 
     /* reserved for future use */
diff --git a/include/hardware/hardware.h b/include/hardware/hardware.h
index bf076f6c..8b47d64b 100644
--- a/include/hardware/hardware.h
+++ b/include/hardware/hardware.h
@@ -201,6 +201,46 @@ typedef struct hw_device_t {
 
 } hw_device_t;
 
+typedef enum {
+
+    /*
+     * sRGB color pixel formats:
+     *
+     * The red, green and blue components are stored in sRGB space, and converted
+     * to linear space when read, using the standard sRGB to linear equation:
+     *
+     * Clinear = Csrgb / 12.92                  for Csrgb <= 0.04045
+     *         = (Csrgb + 0.055 / 1.055)^2.4    for Csrgb >  0.04045
+     *
+     * When written the inverse transformation is performed:
+     *
+     * Csrgb = 12.92 * Clinear                  for Clinear <= 0.0031308
+     *       = 1.055 * Clinear^(1/2.4) - 0.055  for Clinear >  0.0031308
+     *
+     *
+     *  The alpha component, if present, is always stored in linear space and
+     *  is left unmodified when read or written.
+     *
+     */
+    HAL_PIXEL_FORMAT_sRGB_A_8888        = 0xC,
+    HAL_PIXEL_FORMAT_sRGB_X_8888        = 0xD,
+
+    HAL_PIXEL_FORMAT_YCrCb_NV12         = 0x15, // YUY2
+    HAL_PIXEL_FORMAT_YCrCb_NV12_VIDEO   = 0x16,
+    HAL_PIXEL_FORMAT_YCrCb_NV12_10      = 0x17, // YUY2_1obit
+    HAL_PIXEL_FORMAT_YCbCr_422_SP_10    = 0x18, //
+    HAL_PIXEL_FORMAT_YCrCb_420_SP_10    = 0x19, //
+
+    HAL_PIXEL_FORMAT_YUV420_8BIT_I      = 0x1A, // 420I 8bit
+    HAL_PIXEL_FORMAT_YUV420_10BIT_I     = 0x1B, // 420I 10bit
+    HAL_PIXEL_FORMAT_Y210               = 0x1C, // 422I 10bit
+
+    HAL_PIXEL_FORMAT_BPP_1              = 0x30,
+    HAL_PIXEL_FORMAT_BPP_2              = 0x31,
+    HAL_PIXEL_FORMAT_BPP_4              = 0x32,
+    HAL_PIXEL_FORMAT_BPP_8              = 0x33,
+}rk_pixel_format_t;
+
 #ifdef __cplusplus
 #define TO_HW_DEVICE_T_OPEN(x) reinterpret_cast<struct hw_device_t**>(x)
 #else
diff --git a/include/hardware/hwcomposer.h b/include/hardware/hwcomposer.h
index 9eb1aafb..7f316d13 100644
--- a/include/hardware/hwcomposer.h
+++ b/include/hardware/hwcomposer.h
@@ -178,6 +178,22 @@ typedef struct hwc_layer_1 {
              * The visible region INCLUDES areas overlapped by a translucent layer.
              */
             hwc_region_t visibleRegionScreen;
+    		char LayerName[LayerNameLength + 1];
+			int32_t bufferCount;
+            int32_t bufferUpdate;
+            int32_t bufferChange;
+            int32_t dospecialflag;
+            int32_t alreadyStereo;
+            int32_t displayStereo;
+            int32_t exLeft;
+            int32_t exRight;
+            int32_t exAddrOffset;
+			uint32_t realtransform;
+			#ifdef TARGET_BOARD_PLATFORM_RK312X
+			uint32_t direct_fd;
+			#else
+			uint32_t direct_addr;
+			#endif
 
             /* Sync fence object that will be signaled when the buffer's
              * contents are available. May be -1 if the contents are already
@@ -402,6 +418,7 @@ typedef struct hwc_display_contents_1 {
      * performed by SurfaceFlinger.
      */
     uint32_t flags;
+    uint32_t skipflag;
     size_t numHwLayers;
     hwc_layer_1_t hwLayers[0];
 
@@ -573,6 +590,12 @@ typedef struct hwc_composer_device_1 {
     int (*set)(struct hwc_composer_device_1 *dev,
                 size_t numDisplays, hwc_display_contents_1_t** displays);
 
+	int (*fbPost2)(struct hwc_composer_device_1 *dev,size_t numDisplays, hwc_display_contents_1_t** displays);
+	int (*fbPost3)(struct hwc_composer_device_1 *dev,size_t numDisplays, hwc_display_contents_1_t** displays,buffer_handle_t buffer);
+    int (*layer_recover)(struct hwc_composer_device_1 *dev,
+                    size_t numDisplays, hwc_display_contents_1_t** displays);
+	int (*rkCopybit)(struct hwc_composer_device_1 *dev,buffer_handle_t src_handle,
+	                    buffer_handle_t dst_handle,int flag);
     /*
      * eventControl(..., event, enabled)
      * Enables or disables h/w composer events for a display.
diff --git a/include/hardware/hwcomposer_defs.h b/include/hardware/hwcomposer_defs.h
index c4d8a44c..17a41738 100644
--- a/include/hardware/hwcomposer_defs.h
+++ b/include/hardware/hwcomposer_defs.h
@@ -141,6 +141,11 @@ typedef struct hwc_client_target_property {
  * Beyond this point are things only used by HWC1, which should be ignored when
  * implementing a HWC2 device
  ******************************************************************************/
+#define HWC_BLENDING_DIM		0x0805
+#define HWC_BLENDING_CLEAR_HOLE          0x0806
+
+#define HWC_Layer_DEBUG
+#define LayerNameLength 60
 
 enum {
     /* hwc_composer_device_t::set failed in EGL */
@@ -219,7 +224,13 @@ enum {
        cursor overlay hardware. hwcomposer will also all async position updates
        of this layer outside of the normal prepare()/set() loop. Added in
        HWC_DEVICE_API_VERSION_1_4. */
-    HWC_CURSOR_OVERLAY =  5
+    HWC_CURSOR_OVERLAY =  5,
+    HWC_TOWIN0,
+    HWC_TOWIN1,
+    HWC_LCDC,
+    HWC_NODRAW,
+    HWC_MIX,
+    HWC_MIX_V2
  };
 /*
  * hwc_layer_t::blending values
diff --git a/include/hardware/power.h b/include/hardware/power.h
index bd8216ef..360f3cd0 100644
--- a/include/hardware/power.h
+++ b/include/hardware/power.h
@@ -65,7 +65,8 @@ typedef enum {
     POWER_HINT_SUSTAINED_PERFORMANCE = 0x00000006,
     POWER_HINT_VR_MODE = 0x00000007,
     POWER_HINT_LAUNCH = 0x00000008,
-    POWER_HINT_DISABLE_TOUCH = 0x00000009
+    POWER_HINT_DISABLE_TOUCH = 0x00000009,
+    POWER_HINT_PERFORMANCE = 0x0000000A
 } power_hint_t;
 
 typedef enum {
diff --git a/include/hardware/rga.h b/include/hardware/rga.h
new file mode 100644
index 00000000..b6c7d84b
--- /dev/null
+++ b/include/hardware/rga.h
@@ -0,0 +1,737 @@
+#ifndef _RGA_DRIVER_H_
+#define _RGA_DRIVER_H_
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+
+
+#define RGA_BLIT_SYNC	0x5017
+#define RGA_BLIT_ASYNC  0x5018
+#define RGA_FLUSH       0x5019
+#define RGA_GET_RESULT  0x501a
+#define RGA_GET_VERSION 0x501b
+
+
+#define RGA_REG_CTRL_LEN    0x8    /* 8  */
+#define RGA_REG_CMD_LEN     0x1c   /* 28 */
+#define RGA_CMD_BUF_SIZE    0x700  /* 16*28*4 */
+
+
+
+#ifndef ENABLE
+#define ENABLE 1
+#endif
+
+
+#ifndef DISABLE
+#define DISABLE 0
+#endif
+
+
+
+/* RGA process mode enum */
+enum
+{    
+    bitblt_mode               = 0x0,
+    color_palette_mode        = 0x1,
+    color_fill_mode           = 0x2,
+    line_point_drawing_mode   = 0x3,
+    blur_sharp_filter_mode    = 0x4,
+    pre_scaling_mode          = 0x5,
+    update_palette_table_mode = 0x6,
+    update_patten_buff_mode   = 0x7,
+};
+
+
+enum
+{
+    rop_enable_mask          = 0x2,
+    dither_enable_mask       = 0x8,
+    fading_enable_mask       = 0x10,
+    PD_enbale_mask           = 0x20,
+};
+
+enum
+{
+    yuv2rgb_mode0            = 0x0,     /* BT.601 MPEG */
+    yuv2rgb_mode1            = 0x1,     /* BT.601 JPEG */
+    yuv2rgb_mode2            = 0x2,     /* BT.709      */
+};
+
+
+/* RGA rotate mode */
+enum 
+{
+    rotate_mode0             = 0x0,     /* no rotate */
+    rotate_mode1             = 0x1,     /* rotate    */
+    rotate_mode2             = 0x2,     /* x_mirror  */
+    rotate_mode3             = 0x3,     /* y_mirror  */
+};
+
+enum
+{
+    color_palette_mode0      = 0x0,     /* 1K */
+    color_palette_mode1      = 0x1,     /* 2K */
+    color_palette_mode2      = 0x2,     /* 4K */
+    color_palette_mode3      = 0x3,     /* 8K */
+};
+
+enum 
+{
+    BB_BYPASS   = 0x0,     /* no rotate */
+    BB_ROTATE   = 0x1,     /* rotate    */
+    BB_X_MIRROR = 0x2,     /* x_mirror  */
+    BB_Y_MIRROR = 0x3      /* y_mirror  */
+};
+
+enum 
+{
+    nearby   = 0x0,     /* no rotate */
+    bilinear = 0x1,     /* rotate    */
+    bicubic  = 0x2,     /* x_mirror  */
+};
+
+
+
+
+
+/*
+//          Alpha    Red     Green   Blue  
+{  4, 32, {{32,24,   8, 0,  16, 8,  24,16 }}, GGL_RGBA },   // RK_FORMAT_RGBA_8888    
+{  4, 24, {{ 0, 0,   8, 0,  16, 8,  24,16 }}, GGL_RGB  },   // RK_FORMAT_RGBX_8888    
+{  3, 24, {{ 0, 0,   8, 0,  16, 8,  24,16 }}, GGL_RGB  },   // RK_FORMAT_RGB_888
+{  4, 32, {{32,24,  24,16,  16, 8,   8, 0 }}, GGL_BGRA },   // RK_FORMAT_BGRA_8888
+{  2, 16, {{ 0, 0,  16,11,  11, 5,   5, 0 }}, GGL_RGB  },   // RK_FORMAT_RGB_565        
+{  2, 16, {{ 1, 0,  16,11,  11, 6,   6, 1 }}, GGL_RGBA },   // RK_FORMAT_RGBA_5551    
+{  2, 16, {{ 4, 0,  16,12,  12, 8,   8, 4 }}, GGL_RGBA },   // RK_FORMAT_RGBA_4444
+{  3, 24, {{ 0, 0,  24,16,  16, 8,   8, 0 }}, GGL_BGR  },   // RK_FORMAT_BGB_888
+
+*/
+typedef enum _Rga_SURF_FORMAT
+{
+	RK_FORMAT_RGBA_8888    = 0x0,
+    RK_FORMAT_RGBX_8888    = 0x1,
+    RK_FORMAT_RGB_888      = 0x2,
+    RK_FORMAT_BGRA_8888    = 0x3,
+    RK_FORMAT_RGB_565      = 0x4,
+    RK_FORMAT_RGBA_5551    = 0x5,
+    RK_FORMAT_RGBA_4444    = 0x6,
+    RK_FORMAT_BGR_888      = 0x7,
+    
+    RK_FORMAT_YCbCr_422_SP = 0x8,    
+    RK_FORMAT_YCbCr_422_P  = 0x9,    
+    RK_FORMAT_YCbCr_420_SP = 0xa,    
+    RK_FORMAT_YCbCr_420_P  = 0xb,
+
+    RK_FORMAT_YCrCb_422_SP = 0xc,    
+    RK_FORMAT_YCrCb_422_P  = 0xd,    
+    RK_FORMAT_YCrCb_420_SP = 0xe,    
+    RK_FORMAT_YCrCb_420_P  = 0xf,
+    
+    RK_FORMAT_BPP1         = 0x10,
+    RK_FORMAT_BPP2         = 0x11,
+    RK_FORMAT_BPP4         = 0x12,
+    RK_FORMAT_BPP8         = 0x13,
+    RK_FORMAT_YCbCr_420_SP_10B = 0x20,
+    RK_FORMAT_YCrCb_420_SP_10B = 0x21,
+    RK_FORMAT_UNKNOWN       = 0x100, 
+}RgaSURF_FORMAT;
+    
+    
+typedef struct rga_img_info_t
+{
+#if defined(__arm64__) || defined(__aarch64__)
+    unsigned long yrgb_addr;      /* yrgb    mem addr         */
+    unsigned long uv_addr;        /* cb/cr   mem addr         */
+    unsigned long v_addr;         /* cr      mem addr         */
+#else
+    unsigned int yrgb_addr;      /* yrgb    mem addr         */
+    unsigned int uv_addr;        /* cb/cr   mem addr         */
+    unsigned int v_addr;         /* cr      mem addr         */
+#endif
+    unsigned int format;         //definition by RK_FORMAT
+    unsigned short act_w;
+    unsigned short act_h;
+    unsigned short x_offset;
+    unsigned short y_offset;
+    
+    unsigned short vir_w;
+    unsigned short vir_h;
+    
+    unsigned short endian_mode; //for BPP
+    unsigned short alpha_swap;
+}
+rga_img_info_t;
+
+
+typedef struct mdp_img_act
+{
+    unsigned short w;         // width
+    unsigned short h;         // height
+    short x_off;     // x offset for the vir
+    short y_off;     // y offset for the vir
+}
+mdp_img_act;
+
+
+
+typedef struct RANGE
+{
+    unsigned short min;
+    unsigned short max;
+}
+RANGE;
+
+typedef struct POINT
+{
+    unsigned short x;
+    unsigned short y;
+}
+POINT;
+
+typedef struct RECT
+{
+    unsigned short xmin;
+    unsigned short xmax; // width - 1
+    unsigned short ymin; 
+    unsigned short ymax; // height - 1 
+} RECT;
+
+typedef struct RGB
+{
+    unsigned char r;
+    unsigned char g;
+    unsigned char b;
+    unsigned char res;
+}RGB;
+
+
+typedef struct MMU
+{
+    unsigned char mmu_en;
+#if defined(__arm64__) || defined(__aarch64__)
+    unsigned long base_addr;
+#else
+    unsigned int base_addr;
+#endif
+    unsigned int mmu_flag;     /* [0] mmu enable [1] src_flush [2] dst_flush [3] CMD_flush [4~5] page size*/
+} MMU;
+
+
+
+
+typedef struct COLOR_FILL
+{
+    short gr_x_a;
+    short gr_y_a;
+    short gr_x_b;
+    short gr_y_b;
+    short gr_x_g;
+    short gr_y_g;
+    short gr_x_r;
+    short gr_y_r;
+
+    //u8  cp_gr_saturation;
+}
+COLOR_FILL;
+
+typedef struct FADING
+{
+    unsigned char b;
+    unsigned char g;
+    unsigned char r;
+    unsigned char res;
+}
+FADING;
+
+
+typedef struct line_draw_t
+{
+    POINT start_point;              /* LineDraw_start_point                */
+    POINT end_point;                /* LineDraw_end_point                  */
+    unsigned int   color;               /* LineDraw_color                      */
+    unsigned int   flag;                /* (enum) LineDrawing mode sel         */
+    unsigned int   line_width;          /* range 1~16 */
+}
+line_draw_t;
+
+
+
+ struct rga_req { 
+    unsigned char render_mode;            /* (enum) process mode sel */
+    
+    rga_img_info_t src;                   /* src image info */
+    rga_img_info_t dst;                   /* dst image info */
+    rga_img_info_t pat;             /* patten image info */
+
+#if defined(__arm64__) || defined(__aarch64__)
+    unsigned long rop_mask_addr;         /* rop4 mask addr */
+    unsigned long LUT_addr;              /* LUT addr */
+#else
+    unsigned int rop_mask_addr;         /* rop4 mask addr */
+    unsigned int LUT_addr;              /* LUT addr */
+#endif
+
+    RECT clip;                      /* dst clip window default value is dst_vir */
+                                    /* value from [0, w-1] / [0, h-1]*/
+        
+    int sina;                   /* dst angle  default value 0  16.16 scan from table */
+    int cosa;                   /* dst angle  default value 0  16.16 scan from table */        
+
+    unsigned short alpha_rop_flag;        /* alpha rop process flag           */
+                                    /* ([0] = 1 alpha_rop_enable)       */
+                                    /* ([1] = 1 rop enable)             */                                                                                                                
+                                    /* ([2] = 1 fading_enable)          */
+                                    /* ([3] = 1 PD_enable)              */
+                                    /* ([4] = 1 alpha cal_mode_sel)     */
+                                    /* ([5] = 1 dither_enable)          */
+                                    /* ([6] = 1 gradient fill mode sel) */
+                                    /* ([7] = 1 AA_enable)              */
+
+    unsigned char  scale_mode;            /* 0 nearst / 1 bilnear / 2 bicubic */                             
+                            
+    unsigned int color_key_max;         /* color key max */
+    unsigned int color_key_min;         /* color key min */     
+
+    unsigned int fg_color;              /* foreground color */
+    unsigned int bg_color;              /* background color */
+
+    COLOR_FILL gr_color;            /* color fill use gradient */
+    
+    line_draw_t line_draw_info;
+    
+    FADING fading;
+                              
+    unsigned char PD_mode;                /* porter duff alpha mode sel */
+    
+    unsigned char alpha_global_value;     /* global alpha value */
+     
+    unsigned short rop_code;              /* rop2/3/4 code  scan from rop code table*/
+    
+    unsigned char bsfilter_flag;          /* [2] 0 blur 1 sharp / [1:0] filter_type*/
+    
+    unsigned char palette_mode;           /* (enum) color palatte  0/1bpp, 1/2bpp 2/4bpp 3/8bpp*/
+
+    unsigned char yuv2rgb_mode;           /* (enum) BT.601 MPEG / BT.601 JPEG / BT.709  */ 
+    
+    unsigned char endian_mode;            /* 0/big endian 1/little endian*/
+
+    unsigned char rotate_mode;            /* (enum) rotate mode  */
+                                    /* 0x0,     no rotate  */
+                                    /* 0x1,     rotate     */
+                                    /* 0x2,     x_mirror   */
+                                    /* 0x3,     y_mirror   */
+
+    unsigned char color_fill_mode;        /* 0 solid color / 1 patten color */
+                                    
+    MMU mmu_info;                   /* mmu information */
+
+    unsigned char  alpha_rop_mode;        /* ([0~1] alpha mode)       */
+                                    /* ([2~3] rop   mode)       */
+                                    /* ([4]   zero  mode en)    */
+                                    /* ([5]   dst   alpha mode) */
+
+    unsigned char  src_trans_mode;
+
+    unsigned char CMD_fin_int_enable;                        
+
+    /* completion is reported through a callback */
+	void (*complete)(int retval);
+};
+
+#if 0    
+typedef struct TILE_INFO
+{
+    int64_t matrix[4];
+    
+    uint16_t tile_x_num;     /* x axis tile num / tile size is 8x8 pixel */
+    uint16_t tile_y_num;     /* y axis tile num */
+
+    int16_t dst_x_tmp;      /* dst pos x = (xstart - xoff) default value 0 */
+    int16_t dst_y_tmp;      /* dst pos y = (ystart - yoff) default value 0 */
+
+    uint16_t tile_w;
+    uint16_t tile_h;
+    int16_t tile_start_x_coor;
+    int16_t tile_start_y_coor;
+    int32_t tile_xoff;
+    int32_t tile_yoff;
+
+    int32_t tile_temp_xstart;
+    int32_t tile_temp_ystart;
+
+    /* src tile incr */
+    int32_t x_dx;
+    int32_t x_dy;
+    int32_t y_dx;
+    int32_t y_dy;
+
+    mdp_img_act dst_ctrl;
+    
+}
+TILE_INFO;	
+#endif
+
+#if 0
+
+#define RGA_BASE                 0x10114000
+
+//General Registers
+#define RGA_SYS_CTRL             0x000
+#define RGA_CMD_CTRL             0x004
+#define RGA_CMD_ADDR             0x008
+#define RGA_STATUS               0x00c
+#define RGA_INT                  0x010
+#define RGA_AXI_ID               0x014
+#define RGA_MMU_STA_CTRL         0x018
+#define RGA_MMU_STA              0x01c
+
+//Command code start
+#define RGA_MODE_CTRL            0x100
+
+//Source Image Registers
+#define RGA_SRC_Y_MST            0x104
+#define RGA_SRC_CB_MST           0x108
+#define RGA_MASK_READ_MST        0x108  //repeat
+#define RGA_SRC_CR_MST           0x10c
+#define RGA_SRC_VIR_INFO         0x110
+#define RGA_SRC_ACT_INFO         0x114
+#define RGA_SRC_X_PARA           0x118
+#define RGA_SRC_Y_PARA           0x11c
+#define RGA_SRC_TILE_XINFO       0x120
+#define RGA_SRC_TILE_YINFO       0x124
+#define RGA_SRC_TILE_H_INCR      0x128
+#define RGA_SRC_TILE_V_INCR      0x12c
+#define RGA_SRC_TILE_OFFSETX     0x130
+#define RGA_SRC_TILE_OFFSETY     0x134
+#define RGA_SRC_BG_COLOR         0x138
+#define RGA_SRC_FG_COLOR         0x13c
+#define RGA_LINE_DRAWING_COLOR   0x13c  //repeat
+#define RGA_SRC_TR_COLOR0        0x140
+#define RGA_CP_GR_A              0x140  //repeat
+#define RGA_SRC_TR_COLOR1        0x144
+#define RGA_CP_GR_B              0x144  //repeat
+
+#define RGA_LINE_DRAW            0x148
+#define RGA_PAT_START_POINT      0x148  //repeat
+
+//Destination Image Registers
+#define RGA_DST_MST              0x14c
+#define RGA_LUT_MST              0x14c  //repeat
+#define RGA_PAT_MST              0x14c  //repeat
+#define RGA_LINE_DRAWING_MST     0x14c  //repeat
+
+#define RGA_DST_VIR_INFO         0x150
+
+#define RGA_DST_CTR_INFO         0x154
+#define RGA_LINE_DRAW_XY_INFO    0x154  //repeat 
+
+//Alpha/ROP Registers
+#define RGA_ALPHA_CON            0x158
+
+#define RGA_PAT_CON              0x15c
+#define RGA_DST_VIR_WIDTH_PIX    0x15c  //repeat
+
+#define RGA_ROP_CON0             0x160
+#define RGA_CP_GR_G              0x160  //repeat
+#define RGA_PRESCL_CB_MST        0x160  //repeat
+
+#define RGA_ROP_CON1             0x164
+#define RGA_CP_GR_R              0x164  //repeat
+#define RGA_PRESCL_CR_MST        0x164  //repeat
+
+//MMU Register
+#define RGA_FADING_CON           0x168
+#define RGA_MMU_CTRL             0x168  //repeat
+
+#define RGA_MMU_TBL              0x16c  //repeat
+
+
+#define RGA_BLIT_COMPLETE_EVENT 1
+
+#endif
+
+int
+RGA_set_src_act_info(
+		struct rga_req *req,
+		unsigned int   width,       /* act width  */
+		unsigned int   height,      /* act height */
+		unsigned int   x_off,       /* x_off      */
+		unsigned int   y_off        /* y_off      */
+		);
+
+#if defined(__arm64__) || defined(__aarch64__)
+int
+RGA_set_src_vir_info(
+		struct rga_req *req,
+		unsigned long   yrgb_addr,       /* yrgb_addr  */
+		unsigned long   uv_addr,         /* uv_addr    */
+		unsigned long   v_addr,          /* v_addr     */
+		unsigned int   vir_w,           /* vir width  */
+		unsigned int   vir_h,           /* vir height */
+		unsigned char   format,          /* format     */
+		unsigned char  a_swap_en        /* only for 32bit RGB888 format */
+		);
+#else
+int
+RGA_set_src_vir_info(
+		struct rga_req *req,
+		unsigned int   yrgb_addr,       /* yrgb_addr  */
+		unsigned int   uv_addr,         /* uv_addr    */
+		unsigned int   v_addr,          /* v_addr     */
+		unsigned int   vir_w,           /* vir width  */
+		unsigned int   vir_h,           /* vir height */
+		unsigned char  format,          /* format     */
+		unsigned char  a_swap_en        /* only for 32bit RGB888 format */
+		);
+#endif
+
+int
+RGA_set_dst_act_info(
+		struct rga_req *req,
+		unsigned int   width,       /* act width  */
+		unsigned int   height,      /* act height */
+		unsigned int   x_off,       /* x_off      */
+		unsigned int   y_off        /* y_off      */
+		);
+
+#if defined(__arm64__) || defined(__aarch64__)
+int
+RGA_set_dst_vir_info(
+		struct rga_req *msg,
+		unsigned long   yrgb_addr,   /* yrgb_addr   */
+		unsigned long   uv_addr,     /* uv_addr     */
+		unsigned long   v_addr,      /* v_addr      */
+		unsigned int   vir_w,       /* vir width   */
+		unsigned int   vir_h,       /* vir height  */
+		RECT           *clip,        /* clip window */
+		unsigned char  format,      /* format      */
+		unsigned char  a_swap_en
+		);
+#else
+int
+RGA_set_dst_vir_info(
+		struct rga_req *msg,
+		unsigned int   yrgb_addr,   /* yrgb_addr   */
+		unsigned int   uv_addr,     /* uv_addr     */
+		unsigned int   v_addr,      /* v_addr      */
+		unsigned int   vir_w,       /* vir width   */
+		unsigned int   vir_h,       /* vir height  */
+		RECT           *clip,        /* clip window */
+		unsigned char  format,      /* format      */
+		unsigned char  a_swap_en
+		);
+#endif
+
+int 
+RGA_set_pat_info(
+    struct rga_req *msg,
+    unsigned int width,
+    unsigned int height,
+    unsigned int x_off,
+    unsigned int y_off,
+    unsigned int pat_format    
+    );
+
+#if defined(__arm64__) || defined(__aarch64__)
+int
+RGA_set_rop_mask_info(
+		struct rga_req *msg,
+		unsigned long rop_mask_addr,
+		unsigned int rop_mask_endian_mode
+		);
+#else
+int
+RGA_set_rop_mask_info(
+		struct rga_req *msg,
+		unsigned int rop_mask_addr,
+		unsigned int rop_mask_endian_mode
+		);
+#endif
+   
+int RGA_set_alpha_en_info(
+		struct rga_req *msg,
+		unsigned int  alpha_cal_mode,    /* 0:alpha' = alpha + (alpha>>7) | alpha' = alpha */
+		unsigned int  alpha_mode,        /* 0 global alpha / 1 per pixel alpha / 2 mix mode */
+		unsigned int  global_a_value,
+		unsigned int  PD_en,             /* porter duff alpha mode en */ 
+		unsigned int  PD_mode, 
+		unsigned int  dst_alpha_en );    /* use dst alpha  */
+
+int
+RGA_set_rop_en_info(
+		struct rga_req *msg,
+		unsigned int ROP_mode,
+		unsigned int ROP_code,
+		unsigned int color_mode,
+		unsigned int solid_color
+		);
+
+ 
+int
+RGA_set_fading_en_info(
+		struct rga_req *msg,
+		unsigned char r,
+		unsigned char g,
+		unsigned char b
+		);
+
+int
+RGA_set_src_trans_mode_info(
+		struct rga_req *msg,
+		unsigned char trans_mode,
+		unsigned char a_en,
+		unsigned char b_en,
+		unsigned char g_en,
+		unsigned char r_en,
+		unsigned char color_key_min,
+		unsigned char color_key_max,
+		unsigned char zero_mode_en
+		);
+
+
+int
+RGA_set_bitblt_mode(
+		struct rga_req *msg,
+		unsigned char scale_mode,    // 0/near  1/bilnear  2/bicubic  
+		unsigned char rotate_mode,   // 0/copy 1/rotate_scale 2/x_mirror 3/y_mirror 
+		unsigned int  angle,         // rotate angle     
+		unsigned int  dither_en,     // dither en flag   
+		unsigned int  AA_en,         // AA flag          
+		unsigned int  yuv2rgb_mode
+		);
+
+
+int
+RGA_set_color_palette_mode(
+		struct rga_req *msg,
+		unsigned char  palette_mode,        /* 1bpp/2bpp/4bpp/8bpp */
+		unsigned char  endian_mode,         /* src endian mode sel */
+		unsigned int  bpp1_0_color,         /* BPP1 = 0 */
+		unsigned int  bpp1_1_color          /* BPP1 = 1 */
+		);
+
+
+int
+RGA_set_color_fill_mode(
+		struct rga_req *msg,
+		COLOR_FILL  *gr_color,                    /* gradient color part         */
+		unsigned char  gr_satur_mode,            /* saturation mode             */
+    	unsigned char  cf_mode,                  /* patten fill or solid fill   */
+		unsigned int color,                      /* solid color                 */
+		unsigned short pat_width,                /* pattern width               */
+		unsigned short pat_height,               /* pattern height              */   
+		unsigned char pat_x_off,                 /* pattern x offset            */
+		unsigned char pat_y_off,                 /* pattern y offset            */
+		unsigned char aa_en                      /* alpha en                    */
+		);
+
+
+int
+RGA_set_line_point_drawing_mode(
+		struct rga_req *msg,
+		POINT sp,                     /* start point              */
+		POINT ep,                     /* end   point              */
+		unsigned int color,           /* line point drawing color */
+		unsigned int line_width,      /* line width               */
+		unsigned char AA_en,          /* AA en                    */
+		unsigned char last_point_en   /* last point en            */
+		);
+
+
+int
+RGA_set_blur_sharp_filter_mode(
+		struct rga_req *msg,
+		unsigned char filter_mode,   /* blur/sharpness   */
+		unsigned char filter_type,   /* filter intensity */
+		unsigned char dither_en      /* dither_en flag   */
+		);
+
+int
+RGA_set_pre_scaling_mode(
+		struct rga_req *msg,
+		unsigned char dither_en
+		);
+
+#if defined(__arm64__) || defined(__aarch64__)
+int
+RGA_update_palette_table_mode(
+		struct rga_req *msg,
+		unsigned long LUT_addr,      /* LUT table addr      */
+		unsigned int palette_mode   /* 1bpp/2bpp/4bpp/8bpp */
+		);
+#else
+int
+RGA_update_palette_table_mode(
+		struct rga_req *msg,
+		unsigned int LUT_addr,      /* LUT table addr      */
+		unsigned int palette_mode   /* 1bpp/2bpp/4bpp/8bpp */
+		);
+#endif
+
+int
+RGA_set_update_patten_buff_mode(
+		struct rga_req *msg,
+		unsigned int pat_addr, /* patten addr    */
+		unsigned int w,        /* patten width   */
+		unsigned int h,        /* patten height  */
+		unsigned int format    /* patten format  */
+		);
+
+#if defined(__arm64__) || defined(__aarch64__)
+int
+RGA_set_mmu_info(
+		struct rga_req *msg,
+		unsigned char  mmu_en,
+		unsigned char  src_flush,
+		unsigned char  dst_flush,
+		unsigned char  cmd_flush,
+		unsigned long base_addr,
+		unsigned char  page_size
+		);
+#else
+int
+RGA_set_mmu_info(
+		struct rga_req *msg,
+		unsigned char  mmu_en,
+		unsigned char  src_flush,
+		unsigned char  dst_flush,
+		unsigned char  cmd_flush,
+		unsigned int base_addr,
+		unsigned char  page_size
+		);
+#endif
+
+void rga_set_fds_offsets(
+        struct rga_req *rga_request,
+        unsigned short src_fd,
+        unsigned short dst_fd,
+        unsigned int src_offset, 
+        unsigned int dst_offset);
+
+int
+RGA_set_src_fence_flag(
+    struct rga_req *msg,
+    int acq_fence,
+    int src_flag
+);
+
+
+int
+RGA_set_dst_fence_flag(
+    struct rga_req *msg,
+    int dst_flag
+);
+
+int
+RGA_get_dst_fence(
+    struct rga_req *msg
+);
+#ifdef __cplusplus
+}
+#endif
+
+#endif /*_RK29_IPP_DRIVER_H_*/
-- 
2.25.1

